// This file was generated automatically by the Snowball to C# compiler

#pragma warning disable 0164
#pragma warning disable 0162

namespace Accord.MachineLearning.Text.Stemmers
{
    using System;
    using System.Text;
    
    ///<summary>
    ///  This class was automatically generated by a Snowball to C# compiler 
    ///  It implements the stemming algorithm defined by a snowball script.
    ///</summary>
    /// 
    [System.CodeDom.Compiler.GeneratedCode("Snowball", "1.0.0")]
    public partial class SpanishStemmer : StemmerBase
    {
        private int I_p2;
        private int I_p1;
        private int I_pV;

        private static string g_v = "aeiou\u00E1\u00E9\u00ED\u00F3\u00FA\u00FC";
        private readonly Among[] a_0;
        private readonly Among[] a_1;
        private readonly Among[] a_2;
        private readonly Among[] a_3;
        private readonly Among[] a_4;
        private readonly Among[] a_5;
        private readonly Among[] a_6;
        private readonly Among[] a_7;
        private readonly Among[] a_8;
        private readonly Among[] a_9;

        /// <summary>
        ///   Initializes a new instance of the <see cref="SpanishStemmer"/> class.
        /// </summary>
        /// 
        public SpanishStemmer()
        {
            a_0 = new[] 
            {
                new Among("", -1, 6),
                new Among("\u00E1", 0, 1),
                new Among("\u00E9", 0, 2),
                new Among("\u00ED", 0, 3),
                new Among("\u00F3", 0, 4),
                new Among("\u00FA", 0, 5)
            };

            a_1 = new[] 
            {
                new Among("la", -1, -1),
                new Among("sela", 0, -1),
                new Among("le", -1, -1),
                new Among("me", -1, -1),
                new Among("se", -1, -1),
                new Among("lo", -1, -1),
                new Among("selo", 5, -1),
                new Among("las", -1, -1),
                new Among("selas", 7, -1),
                new Among("les", -1, -1),
                new Among("los", -1, -1),
                new Among("selos", 10, -1),
                new Among("nos", -1, -1)
            };

            a_2 = new[] 
            {
                new Among("ando", -1, 6),
                new Among("iendo", -1, 6),
                new Among("yendo", -1, 7),
                new Among("\u00E1ndo", -1, 2),
                new Among("i\u00E9ndo", -1, 1),
                new Among("ar", -1, 6),
                new Among("er", -1, 6),
                new Among("ir", -1, 6),
                new Among("\u00E1r", -1, 3),
                new Among("\u00E9r", -1, 4),
                new Among("\u00EDr", -1, 5)
            };

            a_3 = new[] 
            {
                new Among("ic", -1, -1),
                new Among("ad", -1, -1),
                new Among("os", -1, -1),
                new Among("iv", -1, 1)
            };

            a_4 = new[] 
            {
                new Among("able", -1, 1),
                new Among("ible", -1, 1),
                new Among("ante", -1, 1)
            };

            a_5 = new[] 
            {
                new Among("ic", -1, 1),
                new Among("abil", -1, 1),
                new Among("iv", -1, 1)
            };

            a_6 = new[] 
            {
                new Among("ica", -1, 1),
                new Among("ancia", -1, 2),
                new Among("encia", -1, 5),
                new Among("adora", -1, 2),
                new Among("osa", -1, 1),
                new Among("ista", -1, 1),
                new Among("iva", -1, 9),
                new Among("anza", -1, 1),
                new Among("log\u00EDa", -1, 3),
                new Among("idad", -1, 8),
                new Among("able", -1, 1),
                new Among("ible", -1, 1),
                new Among("ante", -1, 2),
                new Among("mente", -1, 7),
                new Among("amente", 13, 6),
                new Among("aci\u00F3n", -1, 2),
                new Among("uci\u00F3n", -1, 4),
                new Among("ico", -1, 1),
                new Among("ismo", -1, 1),
                new Among("oso", -1, 1),
                new Among("amiento", -1, 1),
                new Among("imiento", -1, 1),
                new Among("ivo", -1, 9),
                new Among("ador", -1, 2),
                new Among("icas", -1, 1),
                new Among("ancias", -1, 2),
                new Among("encias", -1, 5),
                new Among("adoras", -1, 2),
                new Among("osas", -1, 1),
                new Among("istas", -1, 1),
                new Among("ivas", -1, 9),
                new Among("anzas", -1, 1),
                new Among("log\u00EDas", -1, 3),
                new Among("idades", -1, 8),
                new Among("ables", -1, 1),
                new Among("ibles", -1, 1),
                new Among("aciones", -1, 2),
                new Among("uciones", -1, 4),
                new Among("adores", -1, 2),
                new Among("antes", -1, 2),
                new Among("icos", -1, 1),
                new Among("ismos", -1, 1),
                new Among("osos", -1, 1),
                new Among("amientos", -1, 1),
                new Among("imientos", -1, 1),
                new Among("ivos", -1, 9)
            };

            a_7 = new[] 
            {
                new Among("ya", -1, 1),
                new Among("ye", -1, 1),
                new Among("yan", -1, 1),
                new Among("yen", -1, 1),
                new Among("yeron", -1, 1),
                new Among("yendo", -1, 1),
                new Among("yo", -1, 1),
                new Among("yas", -1, 1),
                new Among("yes", -1, 1),
                new Among("yais", -1, 1),
                new Among("yamos", -1, 1),
                new Among("y\u00F3", -1, 1)
            };

            a_8 = new[] 
            {
                new Among("aba", -1, 2),
                new Among("ada", -1, 2),
                new Among("ida", -1, 2),
                new Among("ara", -1, 2),
                new Among("iera", -1, 2),
                new Among("\u00EDa", -1, 2),
                new Among("ar\u00EDa", 5, 2),
                new Among("er\u00EDa", 5, 2),
                new Among("ir\u00EDa", 5, 2),
                new Among("ad", -1, 2),
                new Among("ed", -1, 2),
                new Among("id", -1, 2),
                new Among("ase", -1, 2),
                new Among("iese", -1, 2),
                new Among("aste", -1, 2),
                new Among("iste", -1, 2),
                new Among("an", -1, 2),
                new Among("aban", 16, 2),
                new Among("aran", 16, 2),
                new Among("ieran", 16, 2),
                new Among("\u00EDan", 16, 2),
                new Among("ar\u00EDan", 20, 2),
                new Among("er\u00EDan", 20, 2),
                new Among("ir\u00EDan", 20, 2),
                new Among("en", -1, 1),
                new Among("asen", 24, 2),
                new Among("iesen", 24, 2),
                new Among("aron", -1, 2),
                new Among("ieron", -1, 2),
                new Among("ar\u00E1n", -1, 2),
                new Among("er\u00E1n", -1, 2),
                new Among("ir\u00E1n", -1, 2),
                new Among("ado", -1, 2),
                new Among("ido", -1, 2),
                new Among("ando", -1, 2),
                new Among("iendo", -1, 2),
                new Among("ar", -1, 2),
                new Among("er", -1, 2),
                new Among("ir", -1, 2),
                new Among("as", -1, 2),
                new Among("abas", 39, 2),
                new Among("adas", 39, 2),
                new Among("idas", 39, 2),
                new Among("aras", 39, 2),
                new Among("ieras", 39, 2),
                new Among("\u00EDas", 39, 2),
                new Among("ar\u00EDas", 45, 2),
                new Among("er\u00EDas", 45, 2),
                new Among("ir\u00EDas", 45, 2),
                new Among("es", -1, 1),
                new Among("ases", 49, 2),
                new Among("ieses", 49, 2),
                new Among("abais", -1, 2),
                new Among("arais", -1, 2),
                new Among("ierais", -1, 2),
                new Among("\u00EDais", -1, 2),
                new Among("ar\u00EDais", 55, 2),
                new Among("er\u00EDais", 55, 2),
                new Among("ir\u00EDais", 55, 2),
                new Among("aseis", -1, 2),
                new Among("ieseis", -1, 2),
                new Among("asteis", -1, 2),
                new Among("isteis", -1, 2),
                new Among("\u00E1is", -1, 2),
                new Among("\u00E9is", -1, 1),
                new Among("ar\u00E9is", 64, 2),
                new Among("er\u00E9is", 64, 2),
                new Among("ir\u00E9is", 64, 2),
                new Among("ados", -1, 2),
                new Among("idos", -1, 2),
                new Among("amos", -1, 2),
                new Among("\u00E1bamos", 70, 2),
                new Among("\u00E1ramos", 70, 2),
                new Among("i\u00E9ramos", 70, 2),
                new Among("\u00EDamos", 70, 2),
                new Among("ar\u00EDamos", 74, 2),
                new Among("er\u00EDamos", 74, 2),
                new Among("ir\u00EDamos", 74, 2),
                new Among("emos", -1, 1),
                new Among("aremos", 78, 2),
                new Among("eremos", 78, 2),
                new Among("iremos", 78, 2),
                new Among("\u00E1semos", 78, 2),
                new Among("i\u00E9semos", 78, 2),
                new Among("imos", -1, 2),
                new Among("ar\u00E1s", -1, 2),
                new Among("er\u00E1s", -1, 2),
                new Among("ir\u00E1s", -1, 2),
                new Among("\u00EDs", -1, 2),
                new Among("ar\u00E1", -1, 2),
                new Among("er\u00E1", -1, 2),
                new Among("ir\u00E1", -1, 2),
                new Among("ar\u00E9", -1, 2),
                new Among("er\u00E9", -1, 2),
                new Among("ir\u00E9", -1, 2),
                new Among("i\u00F3", -1, 2)
            };

            a_9 = new[] 
            {
                new Among("a", -1, 1),
                new Among("e", -1, 2),
                new Among("o", -1, 1),
                new Among("os", -1, 1),
                new Among("\u00E1", -1, 1),
                new Among("\u00E9", -1, 2),
                new Among("\u00ED", -1, 1),
                new Among("\u00F3", -1, 1)
            };

        }



        private int r_mark_regions()
        {
            // (, line 31
            I_pV = limit;
            I_p1 = limit;
            I_p2 = limit;
            // do, line 37
            {
                int c1 = cursor;
                // (, line 37
                // or, line 39
                {
                    int c2 = cursor;
                    // (, line 38
                    if (in_grouping(g_v, 97, 252, false) != 0)
                    {
                        goto lab2;
                    }
                    // or, line 38
                    {
                        int c3 = cursor;
                        // (, line 38
                        if (out_grouping(g_v, 97, 252, false) != 0)
                        {
                            goto lab4;
                        }
                        {
                            /* gopast */ 
                            int ret = out_grouping(g_v, 97, 252, true);
                            if (ret < 0)
                            {
                                goto lab4;
                            }

                            cursor += ret;
                        }
                        goto lab3;
                    lab4: ; 
                        cursor = c3;
                        // (, line 38
                        if (in_grouping(g_v, 97, 252, false) != 0)
                        {
                            goto lab2;
                        }
                        {
                            /* gopast */ 
                            int ret = in_grouping(g_v, 97, 252, true);
                            if (ret < 0)
                            {
                                goto lab2;
                            }

                            cursor += ret;
                        }
                    }
                lab3: ; 
                    goto lab1;
                lab2: ; 
                    cursor = c2;
                    // (, line 40
                    if (out_grouping(g_v, 97, 252, false) != 0)
                    {
                        goto lab0;
                    }
                    // or, line 40
                    {
                        int c6 = cursor;
                        // (, line 40
                        if (out_grouping(g_v, 97, 252, false) != 0)
                        {
                            goto lab6;
                        }
                        {
                            /* gopast */ 
                            int ret = out_grouping(g_v, 97, 252, true);
                            if (ret < 0)
                            {
                                goto lab6;
                            }

                            cursor += ret;
                        }
                        goto lab5;
                    lab6: ; 
                        cursor = c6;
                        // (, line 40
                        if (in_grouping(g_v, 97, 252, false) != 0)
                        {
                            goto lab0;
                        }
                        // next, line 40
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                    }
                lab5: ; 
                }
            lab1: ; 
                // setmark pV, line 41
                I_pV = cursor;
            lab0: ; 
                cursor = c1;
            }
            // do, line 43
            {
                int c8 = cursor;
                // (, line 43
                {
                    /* gopast */ 
                    int ret = out_grouping(g_v, 97, 252, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                {
                    /* gopast */ 
                    int ret = in_grouping(g_v, 97, 252, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                // setmark p1, line 44
                I_p1 = cursor;
                {
                    /* gopast */ 
                    int ret = out_grouping(g_v, 97, 252, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                {
                    /* gopast */ 
                    int ret = in_grouping(g_v, 97, 252, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                // setmark p2, line 45
                I_p2 = cursor;
            lab7: ; 
                cursor = c8;
            }

            return 1;
        }

        private int r_postlude()
        {
            int among_var;
            // repeat, line 49
            while (true)
            {
                int c1 = cursor;
                // (, line 49
                // [, line 50
                bra = cursor;
                // substring, line 50
                among_var = find_among(a_0);
                if (among_var == 0)
                {
                    goto lab0;
                }
                // ], line 50
                ket = cursor;
                switch (among_var) 
                {
                    case 0:
                        {
                            goto lab0;
                        }
                    case 1:
                        // (, line 51
                        // <-, line 51
                        slice_from("a");
                        break;
                    case 2:
                        // (, line 52
                        // <-, line 52
                        slice_from("e");
                        break;
                    case 3:
                        // (, line 53
                        // <-, line 53
                        slice_from("i");
                        break;
                    case 4:
                        // (, line 54
                        // <-, line 54
                        slice_from("o");
                        break;
                    case 5:
                        // (, line 55
                        // <-, line 55
                        slice_from("u");
                        break;
                    case 6:
                        // (, line 57
                        // next, line 57
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                        break;
                }
                continue;
            lab0: ; 
                cursor = c1;
                break;
            }

            return 1;
        }

        private int r_RV()
        {
            if (!(I_pV <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_R1()
        {
            if (!(I_p1 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_R2()
        {
            if (!(I_p2 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_attached_pronoun()
        {
            int among_var;
            // (, line 67
            // [, line 68
            ket = cursor;
            // substring, line 68
            if (find_among_b(a_1) == 0)
            {
                return 0;
            }
            // ], line 68
            bra = cursor;
            // substring, line 72
            among_var = find_among_b(a_2);
            if (among_var == 0)
            {
                return 0;
            }
            {
                // call RV, line 72
                int ret = r_RV();
                if (ret == 0)
                    return 0;
                else if (ret < 0)
                    return ret;
            }
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 73
                    // ], line 73
                    bra = cursor;
                    // <-, line 73
                    slice_from("iendo");
                    break;
                case 2:
                    // (, line 74
                    // ], line 74
                    bra = cursor;
                    // <-, line 74
                    slice_from("ando");
                    break;
                case 3:
                    // (, line 75
                    // ], line 75
                    bra = cursor;
                    // <-, line 75
                    slice_from("ar");
                    break;
                case 4:
                    // (, line 76
                    // ], line 76
                    bra = cursor;
                    // <-, line 76
                    slice_from("er");
                    break;
                case 5:
                    // (, line 77
                    // ], line 77
                    bra = cursor;
                    // <-, line 77
                    slice_from("ir");
                    break;
                case 6:
                    // (, line 81
                    // delete, line 81
                    slice_del();
                    break;
                case 7:
                    // (, line 82
                    // literal, line 82
                    if (!(eq_s_b("u")))
                    {
                        return 0;
                    }
                    // delete, line 82
                    slice_del();
                    break;
            }

            return 1;
        }

        private int r_standard_suffix()
        {
            int among_var;
            // (, line 86
            // [, line 87
            ket = cursor;
            // substring, line 87
            among_var = find_among_b(a_6);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 87
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 98
                    {
                        // call R2, line 99
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 99
                    slice_del();
                    break;
                case 2:
                    // (, line 104
                    {
                        // call R2, line 105
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 105
                    slice_del();
                    // try, line 106
                    {
                        int c1 = limit - cursor;
                        // (, line 106
                        // [, line 106
                        ket = cursor;
                        // literal, line 106
                        if (!(eq_s_b("ic")))
                        {
                            {
                                cursor = limit - c1;
                                goto lab0;
                            }
                        }
                        // ], line 106
                        bra = cursor;
                        {
                            // call R2, line 106
                            int ret = r_R2();
                            if (ret == 0)
                                {
                                    cursor = limit - c1;
                                    goto lab0;
                                }
                            else if (ret < 0)
                                return ret;
                        }
                        // delete, line 106
                        slice_del();
                    lab0: ; 
                    }
                    break;
                case 3:
                    // (, line 110
                    {
                        // call R2, line 111
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // <-, line 111
                    slice_from("log");
                    break;
                case 4:
                    // (, line 114
                    {
                        // call R2, line 115
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // <-, line 115
                    slice_from("u");
                    break;
                case 5:
                    // (, line 118
                    {
                        // call R2, line 119
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // <-, line 119
                    slice_from("ente");
                    break;
                case 6:
                    // (, line 122
                    {
                        // call R1, line 123
                        int ret = r_R1();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 123
                    slice_del();
                    // try, line 124
                    {
                        int c2 = limit - cursor;
                        // (, line 124
                        // [, line 125
                        ket = cursor;
                        // substring, line 125
                        among_var = find_among_b(a_3);
                        if (among_var == 0)
                        {
                            {
                                cursor = limit - c2;
                                goto lab1;
                            }
                        }
                        // ], line 125
                        bra = cursor;
                        {
                            // call R2, line 125
                            int ret = r_R2();
                            if (ret == 0)
                                {
                                    cursor = limit - c2;
                                    goto lab1;
                                }
                            else if (ret < 0)
                                return ret;
                        }
                        // delete, line 125
                        slice_del();
                        switch (among_var) 
                        {
                            case 0:
                                {
                                    {
                                        cursor = limit - c2;
                                        goto lab1;
                                    }
                                }
                            case 1:
                                // (, line 126
                                // [, line 126
                                ket = cursor;
                                // literal, line 126
                                if (!(eq_s_b("at")))
                                {
                                    {
                                        cursor = limit - c2;
                                        goto lab1;
                                    }
                                }
                                // ], line 126
                                bra = cursor;
                                {
                                    // call R2, line 126
                                    int ret = r_R2();
                                    if (ret == 0)
                                        {
                                            cursor = limit - c2;
                                            goto lab1;
                                        }
                                    else if (ret < 0)
                                        return ret;
                                }
                                // delete, line 126
                                slice_del();
                                break;
                        }
                    lab1: ; 
                    }
                    break;
                case 7:
                    // (, line 134
                    {
                        // call R2, line 135
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 135
                    slice_del();
                    // try, line 136
                    {
                        int c3 = limit - cursor;
                        // (, line 136
                        // [, line 137
                        ket = cursor;
                        // substring, line 137
                        among_var = find_among_b(a_4);
                        if (among_var == 0)
                        {
                            {
                                cursor = limit - c3;
                                goto lab2;
                            }
                        }
                        // ], line 137
                        bra = cursor;
                        switch (among_var) 
                        {
                            case 0:
                                {
                                    {
                                        cursor = limit - c3;
                                        goto lab2;
                                    }
                                }
                            case 1:
                                // (, line 140
                                {
                                    // call R2, line 140
                                    int ret = r_R2();
                                    if (ret == 0)
                                        {
                                            cursor = limit - c3;
                                            goto lab2;
                                        }
                                    else if (ret < 0)
                                        return ret;
                                }
                                // delete, line 140
                                slice_del();
                                break;
                        }
                    lab2: ; 
                    }
                    break;
                case 8:
                    // (, line 146
                    {
                        // call R2, line 147
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 147
                    slice_del();
                    // try, line 148
                    {
                        int c4 = limit - cursor;
                        // (, line 148
                        // [, line 149
                        ket = cursor;
                        // substring, line 149
                        among_var = find_among_b(a_5);
                        if (among_var == 0)
                        {
                            {
                                cursor = limit - c4;
                                goto lab3;
                            }
                        }
                        // ], line 149
                        bra = cursor;
                        switch (among_var) 
                        {
                            case 0:
                                {
                                    {
                                        cursor = limit - c4;
                                        goto lab3;
                                    }
                                }
                            case 1:
                                // (, line 152
                                {
                                    // call R2, line 152
                                    int ret = r_R2();
                                    if (ret == 0)
                                        {
                                            cursor = limit - c4;
                                            goto lab3;
                                        }
                                    else if (ret < 0)
                                        return ret;
                                }
                                // delete, line 152
                                slice_del();
                                break;
                        }
                    lab3: ; 
                    }
                    break;
                case 9:
                    // (, line 158
                    {
                        // call R2, line 159
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 159
                    slice_del();
                    // try, line 160
                    {
                        int c5 = limit - cursor;
                        // (, line 160
                        // [, line 161
                        ket = cursor;
                        // literal, line 161
                        if (!(eq_s_b("at")))
                        {
                            {
                                cursor = limit - c5;
                                goto lab4;
                            }
                        }
                        // ], line 161
                        bra = cursor;
                        {
                            // call R2, line 161
                            int ret = r_R2();
                            if (ret == 0)
                                {
                                    cursor = limit - c5;
                                    goto lab4;
                                }
                            else if (ret < 0)
                                return ret;
                        }
                        // delete, line 161
                        slice_del();
                    lab4: ; 
                    }
                    break;
            }

            return 1;
        }

        private int r_y_verb_suffix()
        {
            int among_var;
            // (, line 167
            // setlimit, line 168
            int c1 = limit - cursor;
            // tomark, line 168
            if (cursor < I_pV)
            {
                return 0;
            }
            cursor = I_pV;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 168
            // [, line 168
            ket = cursor;
            // substring, line 168
            among_var = find_among_b(a_7);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 168
            bra = cursor;
            limit_backward = c2;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 171
                    // literal, line 171
                    if (!(eq_s_b("u")))
                    {
                        return 0;
                    }
                    // delete, line 171
                    slice_del();
                    break;
            }

            return 1;
        }

        private int r_verb_suffix()
        {
            int among_var;
            // (, line 175
            // setlimit, line 176
            int c1 = limit - cursor;
            // tomark, line 176
            if (cursor < I_pV)
            {
                return 0;
            }
            cursor = I_pV;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 176
            // [, line 176
            ket = cursor;
            // substring, line 176
            among_var = find_among_b(a_8);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 176
            bra = cursor;
            limit_backward = c2;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 179
                    // try, line 179
                    {
                        int c3 = limit - cursor;
                        // (, line 179
                        // literal, line 179
                        if (!(eq_s_b("u")))
                        {
                            {
                                cursor = limit - c3;
                                goto lab0;
                            }
                        }
                        // test, line 179
                        {
                            int c4 = limit - cursor;
                            // literal, line 179
                            if (!(eq_s_b("g")))
                            {
                                {
                                    cursor = limit - c3;
                                    goto lab0;
                                }
                            }
                            cursor = limit - c4;
                        }
                    lab0: ; 
                    }
                    // ], line 179
                    bra = cursor;
                    // delete, line 179
                    slice_del();
                    break;
                case 2:
                    // (, line 200
                    // delete, line 200
                    slice_del();
                    break;
            }

            return 1;
        }

        private int r_residual_suffix()
        {
            int among_var;
            // (, line 204
            // [, line 205
            ket = cursor;
            // substring, line 205
            among_var = find_among_b(a_9);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 205
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 208
                    {
                        // call RV, line 208
                        int ret = r_RV();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 208
                    slice_del();
                    break;
                case 2:
                    // (, line 210
                    {
                        // call RV, line 210
                        int ret = r_RV();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 210
                    slice_del();
                    // try, line 210
                    {
                        int c1 = limit - cursor;
                        // (, line 210
                        // [, line 210
                        ket = cursor;
                        // literal, line 210
                        if (!(eq_s_b("u")))
                        {
                            {
                                cursor = limit - c1;
                                goto lab0;
                            }
                        }
                        // ], line 210
                        bra = cursor;
                        // test, line 210
                        {
                            int c2 = limit - cursor;
                            // literal, line 210
                            if (!(eq_s_b("g")))
                            {
                                {
                                    cursor = limit - c1;
                                    goto lab0;
                                }
                            }
                            cursor = limit - c2;
                        }
                        {
                            // call RV, line 210
                            int ret = r_RV();
                            if (ret == 0)
                                {
                                    cursor = limit - c1;
                                    goto lab0;
                                }
                            else if (ret < 0)
                                return ret;
                        }
                        // delete, line 210
                        slice_del();
                    lab0: ; 
                    }
                    break;
            }

            return 1;
        }

        private int stem()
        {
            // (, line 215
            // do, line 216
            {
                int c1 = cursor;
                {
                    // call mark_regions, line 216
                    int ret = r_mark_regions();
                    if (ret == 0)
                        goto lab0;
                    else if (ret < 0)
                        return ret;
                }
            lab0: ; 
                cursor = c1;
            }
            // backwards, line 217
            limit_backward = cursor; cursor = limit;
            // (, line 217
            // do, line 218
            {
                int c2 = limit - cursor;
                {
                    // call attached_pronoun, line 218
                    int ret = r_attached_pronoun();
                    if (ret == 0)
                        goto lab1;
                    else if (ret < 0)
                        return ret;
                }
            lab1: ; 
                cursor = limit - c2;
            }
            // do, line 219
            {
                int c3 = limit - cursor;
                // (, line 219
                // or, line 219
                {
                    int c4 = limit - cursor;
                    {
                        // call standard_suffix, line 219
                        int ret = r_standard_suffix();
                        if (ret == 0)
                            goto lab4;
                        else if (ret < 0)
                            return ret;
                    }
                    goto lab3;
                lab4: ; 
                    cursor = limit - c4;
                    {
                        // call y_verb_suffix, line 220
                        int ret = r_y_verb_suffix();
                        if (ret == 0)
                            goto lab5;
                        else if (ret < 0)
                            return ret;
                    }
                    goto lab3;
                lab5: ; 
                    cursor = limit - c4;
                    {
                        // call verb_suffix, line 221
                        int ret = r_verb_suffix();
                        if (ret == 0)
                            goto lab2;
                        else if (ret < 0)
                            return ret;
                    }
                }
            lab3: ; 
            lab2: ; 
                cursor = limit - c3;
            }
            // do, line 223
            {
                int c5 = limit - cursor;
                {
                    // call residual_suffix, line 223
                    int ret = r_residual_suffix();
                    if (ret == 0)
                        goto lab6;
                    else if (ret < 0)
                        return ret;
                }
            lab6: ; 
                cursor = limit - c5;
            }
            cursor = limit_backward;
            // do, line 225
            {
                int c6 = cursor;
                {
                    // call postlude, line 225
                    int ret = r_postlude();
                    if (ret == 0)
                        goto lab7;
                    else if (ret < 0)
                        return ret;
                }
            lab7: ; 
                cursor = c6;
            }

            return 1;
        }

        /// <summary>
        ///   Stems the buffer's contents.
        /// </summary>
        /// 
        protected override bool Process()
        {
            return this.stem() > 0;
        }

    }
}

