// This file was generated automatically by the Snowball to C# compiler

#pragma warning disable 0164
#pragma warning disable 0162

namespace Accord.MachineLearning.Text.Stemmers
{
    using System;
    using System.Text;
    
    ///<summary>
    ///  This class was automatically generated by a Snowball to C# compiler 
    ///  It implements the stemming algorithm defined by a snowball script.
    ///</summary>
    /// 
    [System.CodeDom.Compiler.GeneratedCode("Snowball", "1.0.0")]
    public partial class FinnishStemmer : StemmerBase
    {
        private bool B_ending_removed;
        private StringBuilder S_x = new StringBuilder();
        private int I_p2;
        private int I_p1;

        private static string g_AEI = "a\u00E4ei";
        private static string g_V1 = "aeiouy\u00E4\u00F6";
        private static string g_V2 = "aeiou\u00E4\u00F6";
        private static string g_particle_end = "aeiouy\u00E4\u00F6nt";
        private readonly Among[] a_0;
        private readonly Among[] a_1;
        private readonly Among[] a_2;
        private readonly Among[] a_3;
        private readonly Among[] a_4;
        private readonly Among[] a_5;
        private readonly Among[] a_6;
        private readonly Among[] a_7;
        private readonly Among[] a_8;
        private readonly Among[] a_9;

        /// <summary>
        ///   Initializes a new instance of the <see cref="FinnishStemmer"/> class.
        /// </summary>
        /// 
        public FinnishStemmer()
        {
            a_0 = new[] 
            {
                new Among("pa", -1, 1),
                new Among("sti", -1, 2),
                new Among("kaan", -1, 1),
                new Among("han", -1, 1),
                new Among("kin", -1, 1),
                new Among("h\u00E4n", -1, 1),
                new Among("k\u00E4\u00E4n", -1, 1),
                new Among("ko", -1, 1),
                new Among("p\u00E4", -1, 1),
                new Among("k\u00F6", -1, 1)
            };

            a_1 = new[] 
            {
                new Among("lla", -1, -1),
                new Among("na", -1, -1),
                new Among("ssa", -1, -1),
                new Among("ta", -1, -1),
                new Among("lta", 3, -1),
                new Among("sta", 3, -1)
            };

            a_2 = new[] 
            {
                new Among("ll\u00E4", -1, -1),
                new Among("n\u00E4", -1, -1),
                new Among("ss\u00E4", -1, -1),
                new Among("t\u00E4", -1, -1),
                new Among("lt\u00E4", 3, -1),
                new Among("st\u00E4", 3, -1)
            };

            a_3 = new[] 
            {
                new Among("lle", -1, -1),
                new Among("ine", -1, -1)
            };

            a_4 = new[] 
            {
                new Among("nsa", -1, 3),
                new Among("mme", -1, 3),
                new Among("nne", -1, 3),
                new Among("ni", -1, 2),
                new Among("si", -1, 1),
                new Among("an", -1, 4),
                new Among("en", -1, 6),
                new Among("\u00E4n", -1, 5),
                new Among("ns\u00E4", -1, 3)
            };

            a_5 = new[] 
            {
                new Among("aa", -1, -1),
                new Among("ee", -1, -1),
                new Among("ii", -1, -1),
                new Among("oo", -1, -1),
                new Among("uu", -1, -1),
                new Among("\u00E4\u00E4", -1, -1),
                new Among("\u00F6\u00F6", -1, -1)
            };

            a_6 = new[] 
            {
                new Among("a", -1, 8),
                new Among("lla", 0, -1),
                new Among("na", 0, -1),
                new Among("ssa", 0, -1),
                new Among("ta", 0, -1),
                new Among("lta", 4, -1),
                new Among("sta", 4, -1),
                new Among("tta", 4, 9),
                new Among("lle", -1, -1),
                new Among("ine", -1, -1),
                new Among("ksi", -1, -1),
                new Among("n", -1, 7),
                new Among("han", 11, 1),
                new Among("den", 11, -1, r_VI),
                new Among("seen", 11, -1, r_LONG),
                new Among("hen", 11, 2),
                new Among("tten", 11, -1, r_VI),
                new Among("hin", 11, 3),
                new Among("siin", 11, -1, r_VI),
                new Among("hon", 11, 4),
                new Among("h\u00E4n", 11, 5),
                new Among("h\u00F6n", 11, 6),
                new Among("\u00E4", -1, 8),
                new Among("ll\u00E4", 22, -1),
                new Among("n\u00E4", 22, -1),
                new Among("ss\u00E4", 22, -1),
                new Among("t\u00E4", 22, -1),
                new Among("lt\u00E4", 26, -1),
                new Among("st\u00E4", 26, -1),
                new Among("tt\u00E4", 26, 9)
            };

            a_7 = new[] 
            {
                new Among("eja", -1, -1),
                new Among("mma", -1, 1),
                new Among("imma", 1, -1),
                new Among("mpa", -1, 1),
                new Among("impa", 3, -1),
                new Among("mmi", -1, 1),
                new Among("immi", 5, -1),
                new Among("mpi", -1, 1),
                new Among("impi", 7, -1),
                new Among("ej\u00E4", -1, -1),
                new Among("mm\u00E4", -1, 1),
                new Among("imm\u00E4", 10, -1),
                new Among("mp\u00E4", -1, 1),
                new Among("imp\u00E4", 12, -1)
            };

            a_8 = new[] 
            {
                new Among("i", -1, -1),
                new Among("j", -1, -1)
            };

            a_9 = new[] 
            {
                new Among("mma", -1, 1),
                new Among("imma", 0, -1)
            };

        }



        private int r_mark_regions()
        {
            // (, line 41
            I_p1 = limit;
            I_p2 = limit;
            if (out_grouping(g_V1, 97, 246, true) < 0)
            {
                return 0;
            }
 /* goto */            {
                /* gopast */ 
                int ret = in_grouping(g_V1, 97, 246, true);
                if (ret < 0)
                {
                    return 0;
                }

                cursor += ret;
            }
            // setmark p1, line 46
            I_p1 = cursor;
            if (out_grouping(g_V1, 97, 246, true) < 0)
            {
                return 0;
            }
 /* goto */            {
                /* gopast */ 
                int ret = in_grouping(g_V1, 97, 246, true);
                if (ret < 0)
                {
                    return 0;
                }

                cursor += ret;
            }
            // setmark p2, line 47
            I_p2 = cursor;

            return 1;
        }

        private int r_R2()
        {
            if (!(I_p2 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_particle_etc()
        {
            int among_var;
            // (, line 54
            // setlimit, line 55
            int c1 = limit - cursor;
            // tomark, line 55
            if (cursor < I_p1)
            {
                return 0;
            }
            cursor = I_p1;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 55
            // [, line 55
            ket = cursor;
            // substring, line 55
            among_var = find_among_b(a_0);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 55
            bra = cursor;
            limit_backward = c2;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 62
                    if (in_grouping_b(g_particle_end, 97, 246, false) != 0)
                    {
                        return 0;
                    }
                    break;
                case 2:
                    // (, line 64
                    {
                        // call R2, line 64
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    break;
            }
            // delete, line 66
            slice_del();

            return 1;
        }

        private int r_possessive()
        {
            int among_var;
            // (, line 68
            // setlimit, line 69
            int c1 = limit - cursor;
            // tomark, line 69
            if (cursor < I_p1)
            {
                return 0;
            }
            cursor = I_p1;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 69
            // [, line 69
            ket = cursor;
            // substring, line 69
            among_var = find_among_b(a_4);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 69
            bra = cursor;
            limit_backward = c2;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 72
                    // not, line 72
                    {
                        int c3 = limit - cursor;
                        // literal, line 72
                        if (!(eq_s_b("k")))
                        {
                            goto lab0;
                        }
                        return 0;
                    lab0: ; 
                        cursor = limit - c3;
                    }
                    // delete, line 72
                    slice_del();
                    break;
                case 2:
                    // (, line 74
                    // delete, line 74
                    slice_del();
                    // [, line 74
                    ket = cursor;
                    // literal, line 74
                    if (!(eq_s_b("kse")))
                    {
                        return 0;
                    }
                    // ], line 74
                    bra = cursor;
                    // <-, line 74
                    slice_from("ksi");
                    break;
                case 3:
                    // (, line 78
                    // delete, line 78
                    slice_del();
                    break;
                case 4:
                    // (, line 81
                    // among, line 81
                    if (find_among_b(a_1) == 0)
                    {
                        return 0;
                    }
                    // delete, line 81
                    slice_del();
                    break;
                case 5:
                    // (, line 83
                    // among, line 83
                    if (find_among_b(a_2) == 0)
                    {
                        return 0;
                    }
                    // delete, line 84
                    slice_del();
                    break;
                case 6:
                    // (, line 86
                    // among, line 86
                    if (find_among_b(a_3) == 0)
                    {
                        return 0;
                    }
                    // delete, line 86
                    slice_del();
                    break;
            }

            return 1;
        }

        private int r_LONG()
        {
            // among, line 91
            if (find_among_b(a_5) == 0)
            {
                return 0;
            }

            return 1;
        }

        private int r_VI()
        {
            // (, line 93
            // literal, line 93
            if (!(eq_s_b("i")))
            {
                return 0;
            }
            if (in_grouping_b(g_V2, 97, 246, false) != 0)
            {
                return 0;
            }

            return 1;
        }

        private int r_case_ending()
        {
            int among_var;
            // (, line 95
            // setlimit, line 96
            int c1 = limit - cursor;
            // tomark, line 96
            if (cursor < I_p1)
            {
                return 0;
            }
            cursor = I_p1;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 96
            // [, line 96
            ket = cursor;
            // substring, line 96
            among_var = find_among_b(a_6);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 96
            bra = cursor;
            limit_backward = c2;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 98
                    // literal, line 98
                    if (!(eq_s_b("a")))
                    {
                        return 0;
                    }
                    break;
                case 2:
                    // (, line 99
                    // literal, line 99
                    if (!(eq_s_b("e")))
                    {
                        return 0;
                    }
                    break;
                case 3:
                    // (, line 100
                    // literal, line 100
                    if (!(eq_s_b("i")))
                    {
                        return 0;
                    }
                    break;
                case 4:
                    // (, line 101
                    // literal, line 101
                    if (!(eq_s_b("o")))
                    {
                        return 0;
                    }
                    break;
                case 5:
                    // (, line 102
                    // literal, line 102
                    if (!(eq_s_b("\u00E4")))
                    {
                        return 0;
                    }
                    break;
                case 6:
                    // (, line 103
                    // literal, line 103
                    if (!(eq_s_b("\u00F6")))
                    {
                        return 0;
                    }
                    break;
                case 7:
                    // (, line 111
                    // try, line 111
                    {
                        int c3 = limit - cursor;
                        // (, line 111
                        // and, line 113
                        int c4 = limit - cursor;
                        // or, line 112
                        {
                            int c5 = limit - cursor;
                            {
                                // call LONG, line 111
                                int ret = r_LONG();
                                if (ret == 0)
                                    goto lab2;
                                else if (ret < 0)
                                    return ret;
                            }
                            goto lab1;
                        lab2: ; 
                            cursor = limit - c5;
                            // literal, line 112
                            if (!(eq_s_b("ie")))
                            {
                                {
                                    cursor = limit - c3;
                                    goto lab0;
                                }
                            }
                        }
                    lab1: ; 
                        cursor = limit - c4;
                        // next, line 113
                        if (cursor <= limit_backward)
                        {
                            {
                                cursor = limit - c3;
                                goto lab0;
                            }
                        }
                        cursor--;
                        // ], line 113
                        bra = cursor;
                    lab0: ; 
                    }
                    break;
                case 8:
                    // (, line 119
                    if (in_grouping_b(g_V1, 97, 246, false) != 0)
                    {
                        return 0;
                    }
                    if (out_grouping_b(g_V1, 97, 246, false) != 0)
                    {
                        return 0;
                    }
                    break;
                case 9:
                    // (, line 121
                    // literal, line 121
                    if (!(eq_s_b("e")))
                    {
                        return 0;
                    }
                    break;
            }
            // delete, line 138
            slice_del();
            // set ending_removed, line 139
            B_ending_removed = true;

            return 1;
        }

        private int r_other_endings()
        {
            int among_var;
            // (, line 141
            // setlimit, line 142
            int c1 = limit - cursor;
            // tomark, line 142
            if (cursor < I_p2)
            {
                return 0;
            }
            cursor = I_p2;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 142
            // [, line 142
            ket = cursor;
            // substring, line 142
            among_var = find_among_b(a_7);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 142
            bra = cursor;
            limit_backward = c2;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 146
                    // not, line 146
                    {
                        int c3 = limit - cursor;
                        // literal, line 146
                        if (!(eq_s_b("po")))
                        {
                            goto lab0;
                        }
                        return 0;
                    lab0: ; 
                        cursor = limit - c3;
                    }
                    break;
            }
            // delete, line 151
            slice_del();

            return 1;
        }

        private int r_i_plural()
        {
            // (, line 153
            // setlimit, line 154
            int c1 = limit - cursor;
            // tomark, line 154
            if (cursor < I_p1)
            {
                return 0;
            }
            cursor = I_p1;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 154
            // [, line 154
            ket = cursor;
            // substring, line 154
            if (find_among_b(a_8) == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 154
            bra = cursor;
            limit_backward = c2;
            // delete, line 158
            slice_del();

            return 1;
        }

        private int r_t_plural()
        {
            int among_var;
            // (, line 160
            // setlimit, line 161
            int c1 = limit - cursor;
            // tomark, line 161
            if (cursor < I_p1)
            {
                return 0;
            }
            cursor = I_p1;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 161
            // [, line 162
            ket = cursor;
            // literal, line 162
            if (!(eq_s_b("t")))
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 162
            bra = cursor;
            // test, line 162
            {
                int c3 = limit - cursor;
                if (in_grouping_b(g_V1, 97, 246, false) != 0)
                {
                    {
                        limit_backward = c2;
                        return 0;
                    }
                }
                cursor = limit - c3;
            }
            // delete, line 163
            slice_del();
            limit_backward = c2;
            // setlimit, line 165
            int c4 = limit - cursor;
            // tomark, line 165
            if (cursor < I_p2)
            {
                return 0;
            }
            cursor = I_p2;
            int c5 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c4;
            // (, line 165
            // [, line 165
            ket = cursor;
            // substring, line 165
            among_var = find_among_b(a_9);
            if (among_var == 0)
            {
                {
                    limit_backward = c5;
                    return 0;
                }
            }
            // ], line 165
            bra = cursor;
            limit_backward = c5;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 167
                    // not, line 167
                    {
                        int c6 = limit - cursor;
                        // literal, line 167
                        if (!(eq_s_b("po")))
                        {
                            goto lab0;
                        }
                        return 0;
                    lab0: ; 
                        cursor = limit - c6;
                    }
                    break;
            }
            // delete, line 170
            slice_del();

            return 1;
        }

        private int r_tidy()
        {
            // (, line 172
            // setlimit, line 173
            int c1 = limit - cursor;
            // tomark, line 173
            if (cursor < I_p1)
            {
                return 0;
            }
            cursor = I_p1;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 173
            // do, line 174
            {
                int c3 = limit - cursor;
                // (, line 174
                // and, line 174
                int c4 = limit - cursor;
                {
                    // call LONG, line 174
                    int ret = r_LONG();
                    if (ret == 0)
                        goto lab0;
                    else if (ret < 0)
                        return ret;
                }
                cursor = limit - c4;
                // (, line 174
                // [, line 174
                ket = cursor;
                // next, line 174
                if (cursor <= limit_backward)
                {
                    goto lab0;
                }
                cursor--;
                // ], line 174
                bra = cursor;
                // delete, line 174
                slice_del();
            lab0: ; 
                cursor = limit - c3;
            }
            // do, line 175
            {
                int c5 = limit - cursor;
                // (, line 175
                // [, line 175
                ket = cursor;
                if (in_grouping_b(g_AEI, 97, 228, false) != 0)
                {
                    goto lab1;
                }
                // ], line 175
                bra = cursor;
                if (out_grouping_b(g_V1, 97, 246, false) != 0)
                {
                    goto lab1;
                }
                // delete, line 175
                slice_del();
            lab1: ; 
                cursor = limit - c5;
            }
            // do, line 176
            {
                int c6 = limit - cursor;
                // (, line 176
                // [, line 176
                ket = cursor;
                // literal, line 176
                if (!(eq_s_b("j")))
                {
                    goto lab2;
                }
                // ], line 176
                bra = cursor;
                // or, line 176
                {
                    int c7 = limit - cursor;
                    // literal, line 176
                    if (!(eq_s_b("o")))
                    {
                        goto lab4;
                    }
                    goto lab3;
                lab4: ; 
                    cursor = limit - c7;
                    // literal, line 176
                    if (!(eq_s_b("u")))
                    {
                        goto lab2;
                    }
                }
            lab3: ; 
                // delete, line 176
                slice_del();
            lab2: ; 
                cursor = limit - c6;
            }
            // do, line 177
            {
                int c8 = limit - cursor;
                // (, line 177
                // [, line 177
                ket = cursor;
                // literal, line 177
                if (!(eq_s_b("o")))
                {
                    goto lab5;
                }
                // ], line 177
                bra = cursor;
                // literal, line 177
                if (!(eq_s_b("j")))
                {
                    goto lab5;
                }
                // delete, line 177
                slice_del();
            lab5: ; 
                cursor = limit - c8;
            }
            limit_backward = c2;
            if (in_grouping_b(g_V1, 97, 246, true) < 0)
            {
                return 0;
            }
 /* goto */            // [, line 179
            ket = cursor;
            // next, line 179
            if (cursor <= limit_backward)
            {
                return 0;
            }
            cursor--;
            // ], line 179
            bra = cursor;
            // -> x, line 179
            S_x = slice_to(S_x);
            // name x, line 179
            if (!(eq_s_b(S_x)))
            {
                return 0;
            }
            // delete, line 179
            slice_del();

            return 1;
        }

        private int stem()
        {
            // (, line 183
            // do, line 185
            {
                int c1 = cursor;
                {
                    // call mark_regions, line 185
                    int ret = r_mark_regions();
                    if (ret == 0)
                        goto lab0;
                    else if (ret < 0)
                        return ret;
                }
            lab0: ; 
                cursor = c1;
            }
            // unset ending_removed, line 186
            B_ending_removed = false;
            // backwards, line 187
            limit_backward = cursor; cursor = limit;
            // (, line 187
            // do, line 188
            {
                int c2 = limit - cursor;
                {
                    // call particle_etc, line 188
                    int ret = r_particle_etc();
                    if (ret == 0)
                        goto lab1;
                    else if (ret < 0)
                        return ret;
                }
            lab1: ; 
                cursor = limit - c2;
            }
            // do, line 189
            {
                int c3 = limit - cursor;
                {
                    // call possessive, line 189
                    int ret = r_possessive();
                    if (ret == 0)
                        goto lab2;
                    else if (ret < 0)
                        return ret;
                }
            lab2: ; 
                cursor = limit - c3;
            }
            // do, line 190
            {
                int c4 = limit - cursor;
                {
                    // call case_ending, line 190
                    int ret = r_case_ending();
                    if (ret == 0)
                        goto lab3;
                    else if (ret < 0)
                        return ret;
                }
            lab3: ; 
                cursor = limit - c4;
            }
            // do, line 191
            {
                int c5 = limit - cursor;
                {
                    // call other_endings, line 191
                    int ret = r_other_endings();
                    if (ret == 0)
                        goto lab4;
                    else if (ret < 0)
                        return ret;
                }
            lab4: ; 
                cursor = limit - c5;
            }
            // or, line 192
            {
                int c6 = limit - cursor;
                // (, line 192
                // Boolean test ending_removed, line 192
                if (!(B_ending_removed))
                {
                    goto lab6;
                }
                // do, line 192
                {
                    int c7 = limit - cursor;
                    {
                        // call i_plural, line 192
                        int ret = r_i_plural();
                        if (ret == 0)
                            goto lab7;
                        else if (ret < 0)
                            return ret;
                    }
                lab7: ; 
                    cursor = limit - c7;
                }
                goto lab5;
            lab6: ; 
                cursor = limit - c6;
                // do, line 192
                {
                    int c8 = limit - cursor;
                    {
                        // call t_plural, line 192
                        int ret = r_t_plural();
                        if (ret == 0)
                            goto lab8;
                        else if (ret < 0)
                            return ret;
                    }
                lab8: ; 
                    cursor = limit - c8;
                }
            }
        lab5: ; 
            // do, line 193
            {
                int c9 = limit - cursor;
                {
                    // call tidy, line 193
                    int ret = r_tidy();
                    if (ret == 0)
                        goto lab9;
                    else if (ret < 0)
                        return ret;
                }
            lab9: ; 
                cursor = limit - c9;
            }
            cursor = limit_backward;

            return 1;
        }

        /// <summary>
        ///   Stems the buffer's contents.
        /// </summary>
        /// 
        protected override bool Process()
        {
            return this.stem() > 0;
        }

    }
}

