// This file was generated automatically by the Snowball to C# compiler

#pragma warning disable 0164
#pragma warning disable 0162

namespace Accord.MachineLearning.Text.Stemmers
{
    using System;
    using System.Text;
    
    ///<summary>
    ///  This class was automatically generated by a Snowball to C# compiler 
    ///  It implements the stemming algorithm defined by a snowball script.
    ///</summary>
    /// 
    [System.CodeDom.Compiler.GeneratedCode("Snowball", "1.0.0")]
    public partial class NorwegianStemmer : StemmerBase
    {
        private int I_x;
        private int I_p1;

        private static string g_v = "aeiouy\u00E6\u00E5\u00F8";
        private static string g_s_ending = "bcdfghjlmnoprtvyz";
        private readonly Among[] a_0;
        private readonly Among[] a_1;
        private readonly Among[] a_2;

        /// <summary>
        ///   Initializes a new instance of the <see cref="NorwegianStemmer"/> class.
        /// </summary>
        /// 
        public NorwegianStemmer()
        {
            a_0 = new[] 
            {
                new Among("a", -1, 1),
                new Among("e", -1, 1),
                new Among("ede", 1, 1),
                new Among("ande", 1, 1),
                new Among("ende", 1, 1),
                new Among("ane", 1, 1),
                new Among("ene", 1, 1),
                new Among("hetene", 6, 1),
                new Among("erte", 1, 3),
                new Among("en", -1, 1),
                new Among("heten", 9, 1),
                new Among("ar", -1, 1),
                new Among("er", -1, 1),
                new Among("heter", 12, 1),
                new Among("s", -1, 2),
                new Among("as", 14, 1),
                new Among("es", 14, 1),
                new Among("edes", 16, 1),
                new Among("endes", 16, 1),
                new Among("enes", 16, 1),
                new Among("hetenes", 19, 1),
                new Among("ens", 14, 1),
                new Among("hetens", 21, 1),
                new Among("ers", 14, 1),
                new Among("ets", 14, 1),
                new Among("et", -1, 1),
                new Among("het", 25, 1),
                new Among("ert", -1, 3),
                new Among("ast", -1, 1)
            };

            a_1 = new[] 
            {
                new Among("dt", -1, -1),
                new Among("vt", -1, -1)
            };

            a_2 = new[] 
            {
                new Among("leg", -1, 1),
                new Among("eleg", 0, 1),
                new Among("ig", -1, 1),
                new Among("eig", 2, 1),
                new Among("lig", 2, 1),
                new Among("elig", 4, 1),
                new Among("els", -1, 1),
                new Among("lov", -1, 1),
                new Among("elov", 7, 1),
                new Among("slov", 7, 1),
                new Among("hetslov", 9, 1)
            };

        }



        private int r_mark_regions()
        {
            // (, line 26
            I_p1 = limit;
            // test, line 30
            {
                int c1 = cursor;
                // (, line 30
                // hop, line 30
                {
                    int ret = cursor + 3;
                    if (0 > ret || ret > limit)
                    {
                        return 0;
                    }
                    cursor = ret;
                }
                // setmark x, line 30
                I_x = cursor;
                cursor = c1;
            }
            if (out_grouping(g_v, 97, 248, true) < 0)
            {
                return 0;
            }
 /* goto */            {
                /* gopast */ 
                int ret = in_grouping(g_v, 97, 248, true);
                if (ret < 0)
                {
                    return 0;
                }

                cursor += ret;
            }
            // setmark p1, line 31
            I_p1 = cursor;
            // try, line 32
            // (, line 32
            if (!(I_p1 < I_x))
            {
                goto lab0;
            }
            I_p1 = I_x;
        lab0: ; 

            return 1;
        }

        private int r_main_suffix()
        {
            int among_var;
            // (, line 37
            // setlimit, line 38
            int c1 = limit - cursor;
            // tomark, line 38
            if (cursor < I_p1)
            {
                return 0;
            }
            cursor = I_p1;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 38
            // [, line 38
            ket = cursor;
            // substring, line 38
            among_var = find_among_b(a_0);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 38
            bra = cursor;
            limit_backward = c2;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 44
                    // delete, line 44
                    slice_del();
                    break;
                case 2:
                    // (, line 46
                    // or, line 46
                    {
                        int c3 = limit - cursor;
                        if (in_grouping_b(g_s_ending, 98, 122, false) != 0)
                        {
                            goto lab1;
                        }
                        goto lab0;
                    lab1: ; 
                        cursor = limit - c3;
                        // (, line 46
                        // literal, line 46
                        if (!(eq_s_b("k")))
                        {
                            return 0;
                        }
                        if (out_grouping_b(g_v, 97, 248, false) != 0)
                        {
                            return 0;
                        }
                    }
                lab0: ; 
                    // delete, line 46
                    slice_del();
                    break;
                case 3:
                    // (, line 48
                    // <-, line 48
                    slice_from("er");
                    break;
            }

            return 1;
        }

        private int r_consonant_pair()
        {
            // (, line 52
            // test, line 53
            {
                int c1 = limit - cursor;
                // (, line 53
                // setlimit, line 54
                int c2 = limit - cursor;
                // tomark, line 54
                if (cursor < I_p1)
                {
                    return 0;
                }
                cursor = I_p1;
                int c3 = limit_backward;
                limit_backward = cursor;
                cursor = limit - c2;
                // (, line 54
                // [, line 54
                ket = cursor;
                // substring, line 54
                if (find_among_b(a_1) == 0)
                {
                    {
                        limit_backward = c3;
                        return 0;
                    }
                }
                // ], line 54
                bra = cursor;
                limit_backward = c3;
                cursor = limit - c1;
            }
            // next, line 59
            if (cursor <= limit_backward)
            {
                return 0;
            }
            cursor--;
            // ], line 59
            bra = cursor;
            // delete, line 59
            slice_del();

            return 1;
        }

        private int r_other_suffix()
        {
            int among_var;
            // (, line 62
            // setlimit, line 63
            int c1 = limit - cursor;
            // tomark, line 63
            if (cursor < I_p1)
            {
                return 0;
            }
            cursor = I_p1;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 63
            // [, line 63
            ket = cursor;
            // substring, line 63
            among_var = find_among_b(a_2);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 63
            bra = cursor;
            limit_backward = c2;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 67
                    // delete, line 67
                    slice_del();
                    break;
            }

            return 1;
        }

        private int stem()
        {
            // (, line 72
            // do, line 74
            {
                int c1 = cursor;
                {
                    // call mark_regions, line 74
                    int ret = r_mark_regions();
                    if (ret == 0)
                        goto lab0;
                    else if (ret < 0)
                        return ret;
                }
            lab0: ; 
                cursor = c1;
            }
            // backwards, line 75
            limit_backward = cursor; cursor = limit;
            // (, line 75
            // do, line 76
            {
                int c2 = limit - cursor;
                {
                    // call main_suffix, line 76
                    int ret = r_main_suffix();
                    if (ret == 0)
                        goto lab1;
                    else if (ret < 0)
                        return ret;
                }
            lab1: ; 
                cursor = limit - c2;
            }
            // do, line 77
            {
                int c3 = limit - cursor;
                {
                    // call consonant_pair, line 77
                    int ret = r_consonant_pair();
                    if (ret == 0)
                        goto lab2;
                    else if (ret < 0)
                        return ret;
                }
            lab2: ; 
                cursor = limit - c3;
            }
            // do, line 78
            {
                int c4 = limit - cursor;
                {
                    // call other_suffix, line 78
                    int ret = r_other_suffix();
                    if (ret == 0)
                        goto lab3;
                    else if (ret < 0)
                        return ret;
                }
            lab3: ; 
                cursor = limit - c4;
            }
            cursor = limit_backward;

            return 1;
        }

        /// <summary>
        ///   Stems the buffer's contents.
        /// </summary>
        /// 
        protected override bool Process()
        {
            return this.stem() > 0;
        }

    }
}

