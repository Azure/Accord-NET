// This file was generated automatically by the Snowball to C# compiler

#pragma warning disable 0164
#pragma warning disable 0162

namespace Accord.MachineLearning.Text.Stemmers
{
    using System;
    using System.Text;
    
    ///<summary>
    ///  This class was automatically generated by a Snowball to C# compiler 
    ///  It implements the stemming algorithm defined by a snowball script.
    ///</summary>
    /// 
    [System.CodeDom.Compiler.GeneratedCode("Snowball", "1.0.0")]
    public partial class PortugueseStemmer : StemmerBase
    {
        private int I_p2;
        private int I_p1;
        private int I_pV;

        private static string g_v = "aeiou\u00E1\u00E9\u00ED\u00F3\u00FA\u00E2\u00EA\u00F4";
        private readonly Among[] a_0;
        private readonly Among[] a_1;
        private readonly Among[] a_2;
        private readonly Among[] a_3;
        private readonly Among[] a_4;
        private readonly Among[] a_5;
        private readonly Among[] a_6;
        private readonly Among[] a_7;
        private readonly Among[] a_8;

        /// <summary>
        ///   Initializes a new instance of the <see cref="PortugueseStemmer"/> class.
        /// </summary>
        /// 
        public PortugueseStemmer()
        {
            a_0 = new[] 
            {
                new Among("", -1, 3),
                new Among("\u00E3", 0, 1),
                new Among("\u00F5", 0, 2)
            };

            a_1 = new[] 
            {
                new Among("", -1, 3),
                new Among("a~", 0, 1),
                new Among("o~", 0, 2)
            };

            a_2 = new[] 
            {
                new Among("ic", -1, -1),
                new Among("ad", -1, -1),
                new Among("os", -1, -1),
                new Among("iv", -1, 1)
            };

            a_3 = new[] 
            {
                new Among("ante", -1, 1),
                new Among("avel", -1, 1),
                new Among("\u00EDvel", -1, 1)
            };

            a_4 = new[] 
            {
                new Among("ic", -1, 1),
                new Among("abil", -1, 1),
                new Among("iv", -1, 1)
            };

            a_5 = new[] 
            {
                new Among("ica", -1, 1),
                new Among("\u00E2ncia", -1, 1),
                new Among("\u00EAncia", -1, 4),
                new Among("logia", -1, 2),
                new Among("ira", -1, 9),
                new Among("adora", -1, 1),
                new Among("osa", -1, 1),
                new Among("ista", -1, 1),
                new Among("iva", -1, 8),
                new Among("eza", -1, 1),
                new Among("idade", -1, 7),
                new Among("ante", -1, 1),
                new Among("mente", -1, 6),
                new Among("amente", 12, 5),
                new Among("\u00E1vel", -1, 1),
                new Among("\u00EDvel", -1, 1),
                new Among("ico", -1, 1),
                new Among("ismo", -1, 1),
                new Among("oso", -1, 1),
                new Among("amento", -1, 1),
                new Among("imento", -1, 1),
                new Among("ivo", -1, 8),
                new Among("a\u00E7a~o", -1, 1),
                new Among("u\u00E7a~o", -1, 3),
                new Among("ador", -1, 1),
                new Among("icas", -1, 1),
                new Among("\u00EAncias", -1, 4),
                new Among("logias", -1, 2),
                new Among("iras", -1, 9),
                new Among("adoras", -1, 1),
                new Among("osas", -1, 1),
                new Among("istas", -1, 1),
                new Among("ivas", -1, 8),
                new Among("ezas", -1, 1),
                new Among("idades", -1, 7),
                new Among("adores", -1, 1),
                new Among("antes", -1, 1),
                new Among("a\u00E7o~es", -1, 1),
                new Among("u\u00E7o~es", -1, 3),
                new Among("icos", -1, 1),
                new Among("ismos", -1, 1),
                new Among("osos", -1, 1),
                new Among("amentos", -1, 1),
                new Among("imentos", -1, 1),
                new Among("ivos", -1, 8)
            };

            a_6 = new[] 
            {
                new Among("ada", -1, 1),
                new Among("ida", -1, 1),
                new Among("ia", -1, 1),
                new Among("aria", 2, 1),
                new Among("eria", 2, 1),
                new Among("iria", 2, 1),
                new Among("ara", -1, 1),
                new Among("era", -1, 1),
                new Among("ira", -1, 1),
                new Among("ava", -1, 1),
                new Among("asse", -1, 1),
                new Among("esse", -1, 1),
                new Among("isse", -1, 1),
                new Among("aste", -1, 1),
                new Among("este", -1, 1),
                new Among("iste", -1, 1),
                new Among("ei", -1, 1),
                new Among("arei", 16, 1),
                new Among("erei", 16, 1),
                new Among("irei", 16, 1),
                new Among("am", -1, 1),
                new Among("iam", 20, 1),
                new Among("ariam", 21, 1),
                new Among("eriam", 21, 1),
                new Among("iriam", 21, 1),
                new Among("aram", 20, 1),
                new Among("eram", 20, 1),
                new Among("iram", 20, 1),
                new Among("avam", 20, 1),
                new Among("em", -1, 1),
                new Among("arem", 29, 1),
                new Among("erem", 29, 1),
                new Among("irem", 29, 1),
                new Among("assem", 29, 1),
                new Among("essem", 29, 1),
                new Among("issem", 29, 1),
                new Among("ado", -1, 1),
                new Among("ido", -1, 1),
                new Among("ando", -1, 1),
                new Among("endo", -1, 1),
                new Among("indo", -1, 1),
                new Among("ara~o", -1, 1),
                new Among("era~o", -1, 1),
                new Among("ira~o", -1, 1),
                new Among("ar", -1, 1),
                new Among("er", -1, 1),
                new Among("ir", -1, 1),
                new Among("as", -1, 1),
                new Among("adas", 47, 1),
                new Among("idas", 47, 1),
                new Among("ias", 47, 1),
                new Among("arias", 50, 1),
                new Among("erias", 50, 1),
                new Among("irias", 50, 1),
                new Among("aras", 47, 1),
                new Among("eras", 47, 1),
                new Among("iras", 47, 1),
                new Among("avas", 47, 1),
                new Among("es", -1, 1),
                new Among("ardes", 58, 1),
                new Among("erdes", 58, 1),
                new Among("irdes", 58, 1),
                new Among("ares", 58, 1),
                new Among("eres", 58, 1),
                new Among("ires", 58, 1),
                new Among("asses", 58, 1),
                new Among("esses", 58, 1),
                new Among("isses", 58, 1),
                new Among("astes", 58, 1),
                new Among("estes", 58, 1),
                new Among("istes", 58, 1),
                new Among("is", -1, 1),
                new Among("ais", 71, 1),
                new Among("eis", 71, 1),
                new Among("areis", 73, 1),
                new Among("ereis", 73, 1),
                new Among("ireis", 73, 1),
                new Among("\u00E1reis", 73, 1),
                new Among("\u00E9reis", 73, 1),
                new Among("\u00EDreis", 73, 1),
                new Among("\u00E1sseis", 73, 1),
                new Among("\u00E9sseis", 73, 1),
                new Among("\u00EDsseis", 73, 1),
                new Among("\u00E1veis", 73, 1),
                new Among("\u00EDeis", 73, 1),
                new Among("ar\u00EDeis", 84, 1),
                new Among("er\u00EDeis", 84, 1),
                new Among("ir\u00EDeis", 84, 1),
                new Among("ados", -1, 1),
                new Among("idos", -1, 1),
                new Among("amos", -1, 1),
                new Among("\u00E1ramos", 90, 1),
                new Among("\u00E9ramos", 90, 1),
                new Among("\u00EDramos", 90, 1),
                new Among("\u00E1vamos", 90, 1),
                new Among("\u00EDamos", 90, 1),
                new Among("ar\u00EDamos", 95, 1),
                new Among("er\u00EDamos", 95, 1),
                new Among("ir\u00EDamos", 95, 1),
                new Among("emos", -1, 1),
                new Among("aremos", 99, 1),
                new Among("eremos", 99, 1),
                new Among("iremos", 99, 1),
                new Among("\u00E1ssemos", 99, 1),
                new Among("\u00EAssemos", 99, 1),
                new Among("\u00EDssemos", 99, 1),
                new Among("imos", -1, 1),
                new Among("armos", -1, 1),
                new Among("ermos", -1, 1),
                new Among("irmos", -1, 1),
                new Among("\u00E1mos", -1, 1),
                new Among("ar\u00E1s", -1, 1),
                new Among("er\u00E1s", -1, 1),
                new Among("ir\u00E1s", -1, 1),
                new Among("eu", -1, 1),
                new Among("iu", -1, 1),
                new Among("ou", -1, 1),
                new Among("ar\u00E1", -1, 1),
                new Among("er\u00E1", -1, 1),
                new Among("ir\u00E1", -1, 1)
            };

            a_7 = new[] 
            {
                new Among("a", -1, 1),
                new Among("i", -1, 1),
                new Among("o", -1, 1),
                new Among("os", -1, 1),
                new Among("\u00E1", -1, 1),
                new Among("\u00ED", -1, 1),
                new Among("\u00F3", -1, 1)
            };

            a_8 = new[] 
            {
                new Among("e", -1, 1),
                new Among("\u00E7", -1, 2),
                new Among("\u00E9", -1, 1),
                new Among("\u00EA", -1, 1)
            };

        }



        private int r_prelude()
        {
            int among_var;
            // repeat, line 36
            while (true)
            {
                int c1 = cursor;
                // (, line 36
                // [, line 37
                bra = cursor;
                // substring, line 37
                among_var = find_among(a_0);
                if (among_var == 0)
                {
                    goto lab0;
                }
                // ], line 37
                ket = cursor;
                switch (among_var) 
                {
                    case 0:
                        {
                            goto lab0;
                        }
                    case 1:
                        // (, line 38
                        // <-, line 38
                        slice_from("a~");
                        break;
                    case 2:
                        // (, line 39
                        // <-, line 39
                        slice_from("o~");
                        break;
                    case 3:
                        // (, line 40
                        // next, line 40
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                        break;
                }
                continue;
            lab0: ; 
                cursor = c1;
                break;
            }

            return 1;
        }

        private int r_mark_regions()
        {
            // (, line 44
            I_pV = limit;
            I_p1 = limit;
            I_p2 = limit;
            // do, line 50
            {
                int c1 = cursor;
                // (, line 50
                // or, line 52
                {
                    int c2 = cursor;
                    // (, line 51
                    if (in_grouping(g_v, 97, 250, false) != 0)
                    {
                        goto lab2;
                    }
                    // or, line 51
                    {
                        int c3 = cursor;
                        // (, line 51
                        if (out_grouping(g_v, 97, 250, false) != 0)
                        {
                            goto lab4;
                        }
                        {
                            /* gopast */ 
                            int ret = out_grouping(g_v, 97, 250, true);
                            if (ret < 0)
                            {
                                goto lab4;
                            }

                            cursor += ret;
                        }
                        goto lab3;
                    lab4: ; 
                        cursor = c3;
                        // (, line 51
                        if (in_grouping(g_v, 97, 250, false) != 0)
                        {
                            goto lab2;
                        }
                        {
                            /* gopast */ 
                            int ret = in_grouping(g_v, 97, 250, true);
                            if (ret < 0)
                            {
                                goto lab2;
                            }

                            cursor += ret;
                        }
                    }
                lab3: ; 
                    goto lab1;
                lab2: ; 
                    cursor = c2;
                    // (, line 53
                    if (out_grouping(g_v, 97, 250, false) != 0)
                    {
                        goto lab0;
                    }
                    // or, line 53
                    {
                        int c6 = cursor;
                        // (, line 53
                        if (out_grouping(g_v, 97, 250, false) != 0)
                        {
                            goto lab6;
                        }
                        {
                            /* gopast */ 
                            int ret = out_grouping(g_v, 97, 250, true);
                            if (ret < 0)
                            {
                                goto lab6;
                            }

                            cursor += ret;
                        }
                        goto lab5;
                    lab6: ; 
                        cursor = c6;
                        // (, line 53
                        if (in_grouping(g_v, 97, 250, false) != 0)
                        {
                            goto lab0;
                        }
                        // next, line 53
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                    }
                lab5: ; 
                }
            lab1: ; 
                // setmark pV, line 54
                I_pV = cursor;
            lab0: ; 
                cursor = c1;
            }
            // do, line 56
            {
                int c8 = cursor;
                // (, line 56
                {
                    /* gopast */ 
                    int ret = out_grouping(g_v, 97, 250, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                {
                    /* gopast */ 
                    int ret = in_grouping(g_v, 97, 250, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                // setmark p1, line 57
                I_p1 = cursor;
                {
                    /* gopast */ 
                    int ret = out_grouping(g_v, 97, 250, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                {
                    /* gopast */ 
                    int ret = in_grouping(g_v, 97, 250, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                // setmark p2, line 58
                I_p2 = cursor;
            lab7: ; 
                cursor = c8;
            }

            return 1;
        }

        private int r_postlude()
        {
            int among_var;
            // repeat, line 62
            while (true)
            {
                int c1 = cursor;
                // (, line 62
                // [, line 63
                bra = cursor;
                // substring, line 63
                among_var = find_among(a_1);
                if (among_var == 0)
                {
                    goto lab0;
                }
                // ], line 63
                ket = cursor;
                switch (among_var) 
                {
                    case 0:
                        {
                            goto lab0;
                        }
                    case 1:
                        // (, line 64
                        // <-, line 64
                        slice_from("\u00E3");
                        break;
                    case 2:
                        // (, line 65
                        // <-, line 65
                        slice_from("\u00F5");
                        break;
                    case 3:
                        // (, line 66
                        // next, line 66
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                        break;
                }
                continue;
            lab0: ; 
                cursor = c1;
                break;
            }

            return 1;
        }

        private int r_RV()
        {
            if (!(I_pV <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_R1()
        {
            if (!(I_p1 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_R2()
        {
            if (!(I_p2 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_standard_suffix()
        {
            int among_var;
            // (, line 76
            // [, line 77
            ket = cursor;
            // substring, line 77
            among_var = find_among_b(a_5);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 77
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 92
                    {
                        // call R2, line 93
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 93
                    slice_del();
                    break;
                case 2:
                    // (, line 97
                    {
                        // call R2, line 98
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // <-, line 98
                    slice_from("log");
                    break;
                case 3:
                    // (, line 101
                    {
                        // call R2, line 102
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // <-, line 102
                    slice_from("u");
                    break;
                case 4:
                    // (, line 105
                    {
                        // call R2, line 106
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // <-, line 106
                    slice_from("ente");
                    break;
                case 5:
                    // (, line 109
                    {
                        // call R1, line 110
                        int ret = r_R1();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 110
                    slice_del();
                    // try, line 111
                    {
                        int c1 = limit - cursor;
                        // (, line 111
                        // [, line 112
                        ket = cursor;
                        // substring, line 112
                        among_var = find_among_b(a_2);
                        if (among_var == 0)
                        {
                            {
                                cursor = limit - c1;
                                goto lab0;
                            }
                        }
                        // ], line 112
                        bra = cursor;
                        {
                            // call R2, line 112
                            int ret = r_R2();
                            if (ret == 0)
                                {
                                    cursor = limit - c1;
                                    goto lab0;
                                }
                            else if (ret < 0)
                                return ret;
                        }
                        // delete, line 112
                        slice_del();
                        switch (among_var) 
                        {
                            case 0:
                                {
                                    {
                                        cursor = limit - c1;
                                        goto lab0;
                                    }
                                }
                            case 1:
                                // (, line 113
                                // [, line 113
                                ket = cursor;
                                // literal, line 113
                                if (!(eq_s_b("at")))
                                {
                                    {
                                        cursor = limit - c1;
                                        goto lab0;
                                    }
                                }
                                // ], line 113
                                bra = cursor;
                                {
                                    // call R2, line 113
                                    int ret = r_R2();
                                    if (ret == 0)
                                        {
                                            cursor = limit - c1;
                                            goto lab0;
                                        }
                                    else if (ret < 0)
                                        return ret;
                                }
                                // delete, line 113
                                slice_del();
                                break;
                        }
                    lab0: ; 
                    }
                    break;
                case 6:
                    // (, line 121
                    {
                        // call R2, line 122
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 122
                    slice_del();
                    // try, line 123
                    {
                        int c2 = limit - cursor;
                        // (, line 123
                        // [, line 124
                        ket = cursor;
                        // substring, line 124
                        among_var = find_among_b(a_3);
                        if (among_var == 0)
                        {
                            {
                                cursor = limit - c2;
                                goto lab1;
                            }
                        }
                        // ], line 124
                        bra = cursor;
                        switch (among_var) 
                        {
                            case 0:
                                {
                                    {
                                        cursor = limit - c2;
                                        goto lab1;
                                    }
                                }
                            case 1:
                                // (, line 127
                                {
                                    // call R2, line 127
                                    int ret = r_R2();
                                    if (ret == 0)
                                        {
                                            cursor = limit - c2;
                                            goto lab1;
                                        }
                                    else if (ret < 0)
                                        return ret;
                                }
                                // delete, line 127
                                slice_del();
                                break;
                        }
                    lab1: ; 
                    }
                    break;
                case 7:
                    // (, line 133
                    {
                        // call R2, line 134
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 134
                    slice_del();
                    // try, line 135
                    {
                        int c3 = limit - cursor;
                        // (, line 135
                        // [, line 136
                        ket = cursor;
                        // substring, line 136
                        among_var = find_among_b(a_4);
                        if (among_var == 0)
                        {
                            {
                                cursor = limit - c3;
                                goto lab2;
                            }
                        }
                        // ], line 136
                        bra = cursor;
                        switch (among_var) 
                        {
                            case 0:
                                {
                                    {
                                        cursor = limit - c3;
                                        goto lab2;
                                    }
                                }
                            case 1:
                                // (, line 139
                                {
                                    // call R2, line 139
                                    int ret = r_R2();
                                    if (ret == 0)
                                        {
                                            cursor = limit - c3;
                                            goto lab2;
                                        }
                                    else if (ret < 0)
                                        return ret;
                                }
                                // delete, line 139
                                slice_del();
                                break;
                        }
                    lab2: ; 
                    }
                    break;
                case 8:
                    // (, line 145
                    {
                        // call R2, line 146
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 146
                    slice_del();
                    // try, line 147
                    {
                        int c4 = limit - cursor;
                        // (, line 147
                        // [, line 148
                        ket = cursor;
                        // literal, line 148
                        if (!(eq_s_b("at")))
                        {
                            {
                                cursor = limit - c4;
                                goto lab3;
                            }
                        }
                        // ], line 148
                        bra = cursor;
                        {
                            // call R2, line 148
                            int ret = r_R2();
                            if (ret == 0)
                                {
                                    cursor = limit - c4;
                                    goto lab3;
                                }
                            else if (ret < 0)
                                return ret;
                        }
                        // delete, line 148
                        slice_del();
                    lab3: ; 
                    }
                    break;
                case 9:
                    // (, line 152
                    {
                        // call RV, line 153
                        int ret = r_RV();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // literal, line 153
                    if (!(eq_s_b("e")))
                    {
                        return 0;
                    }
                    // <-, line 154
                    slice_from("ir");
                    break;
            }

            return 1;
        }

        private int r_verb_suffix()
        {
            int among_var;
            // setlimit, line 159
            int c1 = limit - cursor;
            // tomark, line 159
            if (cursor < I_pV)
            {
                return 0;
            }
            cursor = I_pV;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 159
            // [, line 160
            ket = cursor;
            // substring, line 160
            among_var = find_among_b(a_6);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 160
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        {
                            limit_backward = c2;
                            return 0;
                        }
                    }
                case 1:
                    // (, line 179
                    // delete, line 179
                    slice_del();
                    break;
            }
            limit_backward = c2;

            return 1;
        }

        private int r_residual_suffix()
        {
            int among_var;
            // (, line 183
            // [, line 184
            ket = cursor;
            // substring, line 184
            among_var = find_among_b(a_7);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 184
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 187
                    {
                        // call RV, line 187
                        int ret = r_RV();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 187
                    slice_del();
                    break;
            }

            return 1;
        }

        private int r_residual_form()
        {
            int among_var;
            // (, line 191
            // [, line 192
            ket = cursor;
            // substring, line 192
            among_var = find_among_b(a_8);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 192
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 194
                    {
                        // call RV, line 194
                        int ret = r_RV();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 194
                    slice_del();
                    // [, line 194
                    ket = cursor;
                    // or, line 194
                    {
                        int c1 = limit - cursor;
                        // (, line 194
                        // literal, line 194
                        if (!(eq_s_b("u")))
                        {
                            goto lab1;
                        }
                        // ], line 194
                        bra = cursor;
                        // test, line 194
                        {
                            int c2 = limit - cursor;
                            // literal, line 194
                            if (!(eq_s_b("g")))
                            {
                                goto lab1;
                            }
                            cursor = limit - c2;
                        }
                        goto lab0;
                    lab1: ; 
                        cursor = limit - c1;
                        // (, line 195
                        // literal, line 195
                        if (!(eq_s_b("i")))
                        {
                            return 0;
                        }
                        // ], line 195
                        bra = cursor;
                        // test, line 195
                        {
                            int c3 = limit - cursor;
                            // literal, line 195
                            if (!(eq_s_b("c")))
                            {
                                return 0;
                            }
                            cursor = limit - c3;
                        }
                    }
                lab0: ; 
                    {
                        // call RV, line 195
                        int ret = r_RV();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 195
                    slice_del();
                    break;
                case 2:
                    // (, line 196
                    // <-, line 196
                    slice_from("c");
                    break;
            }

            return 1;
        }

        private int stem()
        {
            // (, line 201
            // do, line 202
            {
                int c1 = cursor;
                {
                    // call prelude, line 202
                    int ret = r_prelude();
                    if (ret == 0)
                        goto lab0;
                    else if (ret < 0)
                        return ret;
                }
            lab0: ; 
                cursor = c1;
            }
            // do, line 203
            {
                int c2 = cursor;
                {
                    // call mark_regions, line 203
                    int ret = r_mark_regions();
                    if (ret == 0)
                        goto lab1;
                    else if (ret < 0)
                        return ret;
                }
            lab1: ; 
                cursor = c2;
            }
            // backwards, line 204
            limit_backward = cursor; cursor = limit;
            // (, line 204
            // do, line 205
            {
                int c3 = limit - cursor;
                // (, line 205
                // or, line 209
                {
                    int c4 = limit - cursor;
                    // (, line 206
                    // and, line 207
                    int c5 = limit - cursor;
                    // (, line 206
                    // or, line 206
                    {
                        int c6 = limit - cursor;
                        {
                            // call standard_suffix, line 206
                            int ret = r_standard_suffix();
                            if (ret == 0)
                                goto lab6;
                            else if (ret < 0)
                                return ret;
                        }
                        goto lab5;
                    lab6: ; 
                        cursor = limit - c6;
                        {
                            // call verb_suffix, line 206
                            int ret = r_verb_suffix();
                            if (ret == 0)
                                goto lab4;
                            else if (ret < 0)
                                return ret;
                        }
                    }
                lab5: ; 
                    cursor = limit - c5;
                    // do, line 207
                    {
                        int c7 = limit - cursor;
                        // (, line 207
                        // [, line 207
                        ket = cursor;
                        // literal, line 207
                        if (!(eq_s_b("i")))
                        {
                            goto lab7;
                        }
                        // ], line 207
                        bra = cursor;
                        // test, line 207
                        {
                            int c8 = limit - cursor;
                            // literal, line 207
                            if (!(eq_s_b("c")))
                            {
                                goto lab7;
                            }
                            cursor = limit - c8;
                        }
                        {
                            // call RV, line 207
                            int ret = r_RV();
                            if (ret == 0)
                                goto lab7;
                            else if (ret < 0)
                                return ret;
                        }
                        // delete, line 207
                        slice_del();
                    lab7: ; 
                        cursor = limit - c7;
                    }
                    goto lab3;
                lab4: ; 
                    cursor = limit - c4;
                    {
                        // call residual_suffix, line 209
                        int ret = r_residual_suffix();
                        if (ret == 0)
                            goto lab2;
                        else if (ret < 0)
                            return ret;
                    }
                }
            lab3: ; 
            lab2: ; 
                cursor = limit - c3;
            }
            // do, line 211
            {
                int c9 = limit - cursor;
                {
                    // call residual_form, line 211
                    int ret = r_residual_form();
                    if (ret == 0)
                        goto lab8;
                    else if (ret < 0)
                        return ret;
                }
            lab8: ; 
                cursor = limit - c9;
            }
            cursor = limit_backward;
            // do, line 213
            {
                int c10 = cursor;
                {
                    // call postlude, line 213
                    int ret = r_postlude();
                    if (ret == 0)
                        goto lab9;
                    else if (ret < 0)
                        return ret;
                }
            lab9: ; 
                cursor = c10;
            }

            return 1;
        }

        /// <summary>
        ///   Stems the buffer's contents.
        /// </summary>
        /// 
        protected override bool Process()
        {
            return this.stem() > 0;
        }

    }
}

