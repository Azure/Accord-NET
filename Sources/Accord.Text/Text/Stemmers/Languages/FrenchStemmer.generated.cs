// This file was generated automatically by the Snowball to C# compiler

#pragma warning disable 0164
#pragma warning disable 0162

namespace Accord.MachineLearning.Text.Stemmers
{
    using System;
    using System.Text;
    
    ///<summary>
    ///  This class was automatically generated by a Snowball to C# compiler 
    ///  It implements the stemming algorithm defined by a snowball script.
    ///</summary>
    /// 
    [System.CodeDom.Compiler.GeneratedCode("Snowball", "1.0.0")]
    public partial class FrenchStemmer : StemmerBase
    {
        private int I_p2;
        private int I_p1;
        private int I_pV;

        private static string g_v = "aeiouy\u00E2\u00E0\u00EB\u00E9\u00EA\u00E8\u00EF\u00EE\u00F4\u00FB\u00F9";
        private static string g_keep_with_s = "aiou\u00E8s";
        private readonly Among[] a_0;
        private readonly Among[] a_1;
        private readonly Among[] a_2;
        private readonly Among[] a_3;
        private readonly Among[] a_4;
        private readonly Among[] a_5;
        private readonly Among[] a_6;
        private readonly Among[] a_7;
        private readonly Among[] a_8;

        /// <summary>
        ///   Initializes a new instance of the <see cref="FrenchStemmer"/> class.
        /// </summary>
        /// 
        public FrenchStemmer()
        {
            a_0 = new[] 
            {
                new Among("col", -1, -1),
                new Among("par", -1, -1),
                new Among("tap", -1, -1)
            };

            a_1 = new[] 
            {
                new Among("", -1, 4),
                new Among("I", 0, 1),
                new Among("U", 0, 2),
                new Among("Y", 0, 3)
            };

            a_2 = new[] 
            {
                new Among("iqU", -1, 3),
                new Among("abl", -1, 3),
                new Among("I\u00E8r", -1, 4),
                new Among("i\u00E8r", -1, 4),
                new Among("eus", -1, 2),
                new Among("iv", -1, 1)
            };

            a_3 = new[] 
            {
                new Among("ic", -1, 2),
                new Among("abil", -1, 1),
                new Among("iv", -1, 3)
            };

            a_4 = new[] 
            {
                new Among("iqUe", -1, 1),
                new Among("atrice", -1, 2),
                new Among("ance", -1, 1),
                new Among("ence", -1, 5),
                new Among("logie", -1, 3),
                new Among("able", -1, 1),
                new Among("isme", -1, 1),
                new Among("euse", -1, 11),
                new Among("iste", -1, 1),
                new Among("ive", -1, 8),
                new Among("if", -1, 8),
                new Among("usion", -1, 4),
                new Among("ation", -1, 2),
                new Among("ution", -1, 4),
                new Among("ateur", -1, 2),
                new Among("iqUes", -1, 1),
                new Among("atrices", -1, 2),
                new Among("ances", -1, 1),
                new Among("ences", -1, 5),
                new Among("logies", -1, 3),
                new Among("ables", -1, 1),
                new Among("ismes", -1, 1),
                new Among("euses", -1, 11),
                new Among("istes", -1, 1),
                new Among("ives", -1, 8),
                new Among("ifs", -1, 8),
                new Among("usions", -1, 4),
                new Among("ations", -1, 2),
                new Among("utions", -1, 4),
                new Among("ateurs", -1, 2),
                new Among("ments", -1, 15),
                new Among("ements", 30, 6),
                new Among("issements", 31, 12),
                new Among("it\u00E9s", -1, 7),
                new Among("ment", -1, 15),
                new Among("ement", 34, 6),
                new Among("issement", 35, 12),
                new Among("amment", 34, 13),
                new Among("emment", 34, 14),
                new Among("aux", -1, 10),
                new Among("eaux", 39, 9),
                new Among("eux", -1, 1),
                new Among("it\u00E9", -1, 7)
            };

            a_5 = new[] 
            {
                new Among("ira", -1, 1),
                new Among("ie", -1, 1),
                new Among("isse", -1, 1),
                new Among("issante", -1, 1),
                new Among("i", -1, 1),
                new Among("irai", 4, 1),
                new Among("ir", -1, 1),
                new Among("iras", -1, 1),
                new Among("ies", -1, 1),
                new Among("\u00EEmes", -1, 1),
                new Among("isses", -1, 1),
                new Among("issantes", -1, 1),
                new Among("\u00EEtes", -1, 1),
                new Among("is", -1, 1),
                new Among("irais", 13, 1),
                new Among("issais", 13, 1),
                new Among("irions", -1, 1),
                new Among("issions", -1, 1),
                new Among("irons", -1, 1),
                new Among("issons", -1, 1),
                new Among("issants", -1, 1),
                new Among("it", -1, 1),
                new Among("irait", 21, 1),
                new Among("issait", 21, 1),
                new Among("issant", -1, 1),
                new Among("iraIent", -1, 1),
                new Among("issaIent", -1, 1),
                new Among("irent", -1, 1),
                new Among("issent", -1, 1),
                new Among("iront", -1, 1),
                new Among("\u00EEt", -1, 1),
                new Among("iriez", -1, 1),
                new Among("issiez", -1, 1),
                new Among("irez", -1, 1),
                new Among("issez", -1, 1)
            };

            a_6 = new[] 
            {
                new Among("a", -1, 3),
                new Among("era", 0, 2),
                new Among("asse", -1, 3),
                new Among("ante", -1, 3),
                new Among("\u00E9e", -1, 2),
                new Among("ai", -1, 3),
                new Among("erai", 5, 2),
                new Among("er", -1, 2),
                new Among("as", -1, 3),
                new Among("eras", 8, 2),
                new Among("\u00E2mes", -1, 3),
                new Among("asses", -1, 3),
                new Among("antes", -1, 3),
                new Among("\u00E2tes", -1, 3),
                new Among("\u00E9es", -1, 2),
                new Among("ais", -1, 3),
                new Among("erais", 15, 2),
                new Among("ions", -1, 1),
                new Among("erions", 17, 2),
                new Among("assions", 17, 3),
                new Among("erons", -1, 2),
                new Among("ants", -1, 3),
                new Among("\u00E9s", -1, 2),
                new Among("ait", -1, 3),
                new Among("erait", 23, 2),
                new Among("ant", -1, 3),
                new Among("aIent", -1, 3),
                new Among("eraIent", 26, 2),
                new Among("\u00E8rent", -1, 2),
                new Among("assent", -1, 3),
                new Among("eront", -1, 2),
                new Among("\u00E2t", -1, 3),
                new Among("ez", -1, 2),
                new Among("iez", 32, 2),
                new Among("eriez", 33, 2),
                new Among("assiez", 33, 3),
                new Among("erez", 32, 2),
                new Among("\u00E9", -1, 2)
            };

            a_7 = new[] 
            {
                new Among("e", -1, 3),
                new Among("I\u00E8re", 0, 2),
                new Among("i\u00E8re", 0, 2),
                new Among("ion", -1, 1),
                new Among("Ier", -1, 2),
                new Among("ier", -1, 2),
                new Among("\u00EB", -1, 4)
            };

            a_8 = new[] 
            {
                new Among("ell", -1, -1),
                new Among("eill", -1, -1),
                new Among("enn", -1, -1),
                new Among("onn", -1, -1),
                new Among("ett", -1, -1)
            };

        }



        private int r_prelude()
        {
            // repeat, line 38
            while (true)
            {
                int c1 = cursor;
                while (true)
                {
                    // goto, line 38
                    int c2 = cursor;
                    // (, line 38
                    // or, line 44
                    {
                        int c3 = cursor;
                        // (, line 40
                        if (in_grouping(g_v, 97, 251, false) != 0)
                        {
                            goto lab3;
                        }
                        // [, line 40
                        bra = cursor;
                        // or, line 40
                        {
                            int c4 = cursor;
                            // (, line 40
                            // literal, line 40
                            if (!(eq_s("u")))
                            {
                                goto lab5;
                            }
                            // ], line 40
                            ket = cursor;
                            if (in_grouping(g_v, 97, 251, false) != 0)
                            {
                                goto lab5;
                            }
                            // <-, line 40
                            slice_from("U");
                            goto lab4;
                        lab5: ; 
                            cursor = c4;
                            // (, line 41
                            // literal, line 41
                            if (!(eq_s("i")))
                            {
                                goto lab6;
                            }
                            // ], line 41
                            ket = cursor;
                            if (in_grouping(g_v, 97, 251, false) != 0)
                            {
                                goto lab6;
                            }
                            // <-, line 41
                            slice_from("I");
                            goto lab4;
                        lab6: ; 
                            cursor = c4;
                            // (, line 42
                            // literal, line 42
                            if (!(eq_s("y")))
                            {
                                goto lab3;
                            }
                            // ], line 42
                            ket = cursor;
                            // <-, line 42
                            slice_from("Y");
                        }
                    lab4: ; 
                        goto lab2;
                    lab3: ; 
                        cursor = c3;
                        // (, line 45
                        // [, line 45
                        bra = cursor;
                        // literal, line 45
                        if (!(eq_s("y")))
                        {
                            goto lab7;
                        }
                        // ], line 45
                        ket = cursor;
                        if (in_grouping(g_v, 97, 251, false) != 0)
                        {
                            goto lab7;
                        }
                        // <-, line 45
                        slice_from("Y");
                        goto lab2;
                    lab7: ; 
                        cursor = c3;
                        // (, line 47
                        // literal, line 47
                        if (!(eq_s("q")))
                        {
                            goto lab1;
                        }
                        // [, line 47
                        bra = cursor;
                        // literal, line 47
                        if (!(eq_s("u")))
                        {
                            goto lab1;
                        }
                        // ], line 47
                        ket = cursor;
                        // <-, line 47
                        slice_from("U");
                    }
                lab2: ; 
                    cursor = c2;
                    break;
                lab1: ; 
                    cursor = c2;
                    // goto, line 38
                    if (cursor >= limit)
                    {
                        goto lab0;
                    }
                    cursor++;
                }
                continue;
            lab0: ; 
                cursor = c1;
                break;
            }

            return 1;
        }

        private int r_mark_regions()
        {
            // (, line 50
            I_pV = limit;
            I_p1 = limit;
            I_p2 = limit;
            // do, line 56
            {
                int c1 = cursor;
                // (, line 56
                // or, line 58
                {
                    int c2 = cursor;
                    // (, line 57
                    if (in_grouping(g_v, 97, 251, false) != 0)
                    {
                        goto lab2;
                    }
                    if (in_grouping(g_v, 97, 251, false) != 0)
                    {
                        goto lab2;
                    }
                    // next, line 57
                    if (cursor >= limit)
                    {
                        goto lab2;
                    }
                    cursor++;
                    goto lab1;
                lab2: ; 
                    cursor = c2;
                    // among, line 59
                    if (find_among(a_0) == 0)
                    {
                        goto lab3;
                    }
                    goto lab1;
                lab3: ; 
                    cursor = c2;
                    // (, line 66
                    // next, line 66
                    if (cursor >= limit)
                    {
                        goto lab0;
                    }
                    cursor++;
                    {
                        /* gopast */ 
                        int ret = out_grouping(g_v, 97, 251, true);
                        if (ret < 0)
                        {
                            goto lab0;
                        }

                        cursor += ret;
                    }
                }
            lab1: ; 
                // setmark pV, line 67
                I_pV = cursor;
            lab0: ; 
                cursor = c1;
            }
            // do, line 69
            {
                int c4 = cursor;
                // (, line 69
                {
                    /* gopast */ 
                    int ret = out_grouping(g_v, 97, 251, true);
                    if (ret < 0)
                    {
                        goto lab4;
                    }

                    cursor += ret;
                }
                {
                    /* gopast */ 
                    int ret = in_grouping(g_v, 97, 251, true);
                    if (ret < 0)
                    {
                        goto lab4;
                    }

                    cursor += ret;
                }
                // setmark p1, line 70
                I_p1 = cursor;
                {
                    /* gopast */ 
                    int ret = out_grouping(g_v, 97, 251, true);
                    if (ret < 0)
                    {
                        goto lab4;
                    }

                    cursor += ret;
                }
                {
                    /* gopast */ 
                    int ret = in_grouping(g_v, 97, 251, true);
                    if (ret < 0)
                    {
                        goto lab4;
                    }

                    cursor += ret;
                }
                // setmark p2, line 71
                I_p2 = cursor;
            lab4: ; 
                cursor = c4;
            }

            return 1;
        }

        private int r_postlude()
        {
            int among_var;
            // repeat, line 75
            while (true)
            {
                int c1 = cursor;
                // (, line 75
                // [, line 77
                bra = cursor;
                // substring, line 77
                among_var = find_among(a_1);
                if (among_var == 0)
                {
                    goto lab0;
                }
                // ], line 77
                ket = cursor;
                switch (among_var) 
                {
                    case 0:
                        {
                            goto lab0;
                        }
                    case 1:
                        // (, line 78
                        // <-, line 78
                        slice_from("i");
                        break;
                    case 2:
                        // (, line 79
                        // <-, line 79
                        slice_from("u");
                        break;
                    case 3:
                        // (, line 80
                        // <-, line 80
                        slice_from("y");
                        break;
                    case 4:
                        // (, line 81
                        // next, line 81
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                        break;
                }
                continue;
            lab0: ; 
                cursor = c1;
                break;
            }

            return 1;
        }

        private int r_RV()
        {
            if (!(I_pV <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_R1()
        {
            if (!(I_p1 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_R2()
        {
            if (!(I_p2 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_standard_suffix()
        {
            int among_var;
            // (, line 91
            // [, line 92
            ket = cursor;
            // substring, line 92
            among_var = find_among_b(a_4);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 92
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 96
                    {
                        // call R2, line 96
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 96
                    slice_del();
                    break;
                case 2:
                    // (, line 99
                    {
                        // call R2, line 99
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 99
                    slice_del();
                    // try, line 100
                    {
                        int c1 = limit - cursor;
                        // (, line 100
                        // [, line 100
                        ket = cursor;
                        // literal, line 100
                        if (!(eq_s_b("ic")))
                        {
                            {
                                cursor = limit - c1;
                                goto lab0;
                            }
                        }
                        // ], line 100
                        bra = cursor;
                        // or, line 100
                        {
                            int c2 = limit - cursor;
                            // (, line 100
                            {
                                // call R2, line 100
                                int ret = r_R2();
                                if (ret == 0)
                                    goto lab2;
                                else if (ret < 0)
                                    return ret;
                            }
                            // delete, line 100
                            slice_del();
                            goto lab1;
                        lab2: ; 
                            cursor = limit - c2;
                            // <-, line 100
                            slice_from("iqU");
                        }
                    lab1: ; 
                    lab0: ; 
                    }
                    break;
                case 3:
                    // (, line 104
                    {
                        // call R2, line 104
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // <-, line 104
                    slice_from("log");
                    break;
                case 4:
                    // (, line 107
                    {
                        // call R2, line 107
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // <-, line 107
                    slice_from("u");
                    break;
                case 5:
                    // (, line 110
                    {
                        // call R2, line 110
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // <-, line 110
                    slice_from("ent");
                    break;
                case 6:
                    // (, line 113
                    {
                        // call RV, line 114
                        int ret = r_RV();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 114
                    slice_del();
                    // try, line 115
                    {
                        int c3 = limit - cursor;
                        // (, line 115
                        // [, line 116
                        ket = cursor;
                        // substring, line 116
                        among_var = find_among_b(a_2);
                        if (among_var == 0)
                        {
                            {
                                cursor = limit - c3;
                                goto lab3;
                            }
                        }
                        // ], line 116
                        bra = cursor;
                        switch (among_var) 
                        {
                            case 0:
                                {
                                    {
                                        cursor = limit - c3;
                                        goto lab3;
                                    }
                                }
                            case 1:
                                // (, line 117
                                {
                                    // call R2, line 117
                                    int ret = r_R2();
                                    if (ret == 0)
                                        {
                                            cursor = limit - c3;
                                            goto lab3;
                                        }
                                    else if (ret < 0)
                                        return ret;
                                }
                                // delete, line 117
                                slice_del();
                                // [, line 117
                                ket = cursor;
                                // literal, line 117
                                if (!(eq_s_b("at")))
                                {
                                    {
                                        cursor = limit - c3;
                                        goto lab3;
                                    }
                                }
                                // ], line 117
                                bra = cursor;
                                {
                                    // call R2, line 117
                                    int ret = r_R2();
                                    if (ret == 0)
                                        {
                                            cursor = limit - c3;
                                            goto lab3;
                                        }
                                    else if (ret < 0)
                                        return ret;
                                }
                                // delete, line 117
                                slice_del();
                                break;
                            case 2:
                                // (, line 118
                                // or, line 118
                                {
                                    int c4 = limit - cursor;
                                    // (, line 118
                                    {
                                        // call R2, line 118
                                        int ret = r_R2();
                                        if (ret == 0)
                                            goto lab5;
                                        else if (ret < 0)
                                            return ret;
                                    }
                                    // delete, line 118
                                    slice_del();
                                    goto lab4;
                                lab5: ; 
                                    cursor = limit - c4;
                                    // (, line 118
                                    {
                                        // call R1, line 118
                                        int ret = r_R1();
                                        if (ret == 0)
                                            {
                                                cursor = limit - c3;
                                                goto lab3;
                                            }
                                        else if (ret < 0)
                                            return ret;
                                    }
                                    // <-, line 118
                                    slice_from("eux");
                                }
                            lab4: ; 
                                break;
                            case 3:
                                // (, line 120
                                {
                                    // call R2, line 120
                                    int ret = r_R2();
                                    if (ret == 0)
                                        {
                                            cursor = limit - c3;
                                            goto lab3;
                                        }
                                    else if (ret < 0)
                                        return ret;
                                }
                                // delete, line 120
                                slice_del();
                                break;
                            case 4:
                                // (, line 122
                                {
                                    // call RV, line 122
                                    int ret = r_RV();
                                    if (ret == 0)
                                        {
                                            cursor = limit - c3;
                                            goto lab3;
                                        }
                                    else if (ret < 0)
                                        return ret;
                                }
                                // <-, line 122
                                slice_from("i");
                                break;
                        }
                    lab3: ; 
                    }
                    break;
                case 7:
                    // (, line 128
                    {
                        // call R2, line 129
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 129
                    slice_del();
                    // try, line 130
                    {
                        int c5 = limit - cursor;
                        // (, line 130
                        // [, line 131
                        ket = cursor;
                        // substring, line 131
                        among_var = find_among_b(a_3);
                        if (among_var == 0)
                        {
                            {
                                cursor = limit - c5;
                                goto lab6;
                            }
                        }
                        // ], line 131
                        bra = cursor;
                        switch (among_var) 
                        {
                            case 0:
                                {
                                    {
                                        cursor = limit - c5;
                                        goto lab6;
                                    }
                                }
                            case 1:
                                // (, line 132
                                // or, line 132
                                {
                                    int c6 = limit - cursor;
                                    // (, line 132
                                    {
                                        // call R2, line 132
                                        int ret = r_R2();
                                        if (ret == 0)
                                            goto lab8;
                                        else if (ret < 0)
                                            return ret;
                                    }
                                    // delete, line 132
                                    slice_del();
                                    goto lab7;
                                lab8: ; 
                                    cursor = limit - c6;
                                    // <-, line 132
                                    slice_from("abl");
                                }
                            lab7: ; 
                                break;
                            case 2:
                                // (, line 133
                                // or, line 133
                                {
                                    int c7 = limit - cursor;
                                    // (, line 133
                                    {
                                        // call R2, line 133
                                        int ret = r_R2();
                                        if (ret == 0)
                                            goto lab10;
                                        else if (ret < 0)
                                            return ret;
                                    }
                                    // delete, line 133
                                    slice_del();
                                    goto lab9;
                                lab10: ; 
                                    cursor = limit - c7;
                                    // <-, line 133
                                    slice_from("iqU");
                                }
                            lab9: ; 
                                break;
                            case 3:
                                // (, line 134
                                {
                                    // call R2, line 134
                                    int ret = r_R2();
                                    if (ret == 0)
                                        {
                                            cursor = limit - c5;
                                            goto lab6;
                                        }
                                    else if (ret < 0)
                                        return ret;
                                }
                                // delete, line 134
                                slice_del();
                                break;
                        }
                    lab6: ; 
                    }
                    break;
                case 8:
                    // (, line 140
                    {
                        // call R2, line 141
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 141
                    slice_del();
                    // try, line 142
                    {
                        int c8 = limit - cursor;
                        // (, line 142
                        // [, line 142
                        ket = cursor;
                        // literal, line 142
                        if (!(eq_s_b("at")))
                        {
                            {
                                cursor = limit - c8;
                                goto lab11;
                            }
                        }
                        // ], line 142
                        bra = cursor;
                        {
                            // call R2, line 142
                            int ret = r_R2();
                            if (ret == 0)
                                {
                                    cursor = limit - c8;
                                    goto lab11;
                                }
                            else if (ret < 0)
                                return ret;
                        }
                        // delete, line 142
                        slice_del();
                        // [, line 142
                        ket = cursor;
                        // literal, line 142
                        if (!(eq_s_b("ic")))
                        {
                            {
                                cursor = limit - c8;
                                goto lab11;
                            }
                        }
                        // ], line 142
                        bra = cursor;
                        // or, line 142
                        {
                            int c9 = limit - cursor;
                            // (, line 142
                            {
                                // call R2, line 142
                                int ret = r_R2();
                                if (ret == 0)
                                    goto lab13;
                                else if (ret < 0)
                                    return ret;
                            }
                            // delete, line 142
                            slice_del();
                            goto lab12;
                        lab13: ; 
                            cursor = limit - c9;
                            // <-, line 142
                            slice_from("iqU");
                        }
                    lab12: ; 
                    lab11: ; 
                    }
                    break;
                case 9:
                    // (, line 144
                    // <-, line 144
                    slice_from("eau");
                    break;
                case 10:
                    // (, line 145
                    {
                        // call R1, line 145
                        int ret = r_R1();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // <-, line 145
                    slice_from("al");
                    break;
                case 11:
                    // (, line 147
                    // or, line 147
                    {
                        int c10 = limit - cursor;
                        // (, line 147
                        {
                            // call R2, line 147
                            int ret = r_R2();
                            if (ret == 0)
                                goto lab15;
                            else if (ret < 0)
                                return ret;
                        }
                        // delete, line 147
                        slice_del();
                        goto lab14;
                    lab15: ; 
                        cursor = limit - c10;
                        // (, line 147
                        {
                            // call R1, line 147
                            int ret = r_R1();
                            if (ret == 0)
                                return 0;
                            else if (ret < 0)
                                return ret;
                        }
                        // <-, line 147
                        slice_from("eux");
                    }
                lab14: ; 
                    break;
                case 12:
                    // (, line 150
                    {
                        // call R1, line 150
                        int ret = r_R1();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    if (out_grouping_b(g_v, 97, 251, false) != 0)
                    {
                        return 0;
                    }
                    // delete, line 150
                    slice_del();
                    break;
                case 13:
                    // (, line 155
                    {
                        // call RV, line 155
                        int ret = r_RV();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // fail, line 155
                    // (, line 155
                    // <-, line 155
                    slice_from("ant");
                    return 0;
                    break;
                case 14:
                    // (, line 156
                    {
                        // call RV, line 156
                        int ret = r_RV();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // fail, line 156
                    // (, line 156
                    // <-, line 156
                    slice_from("ent");
                    return 0;
                    break;
                case 15:
                    // (, line 158
                    // test, line 158
                    {
                        int c11 = limit - cursor;
                        // (, line 158
                        if (in_grouping_b(g_v, 97, 251, false) != 0)
                        {
                            return 0;
                        }
                        {
                            // call RV, line 158
                            int ret = r_RV();
                            if (ret == 0)
                                return 0;
                            else if (ret < 0)
                                return ret;
                        }
                        cursor = limit - c11;
                    }
                    // fail, line 158
                    // (, line 158
                    // delete, line 158
                    slice_del();
                    return 0;
                    break;
            }

            return 1;
        }

        private int r_i_verb_suffix()
        {
            int among_var;
            // setlimit, line 163
            int c1 = limit - cursor;
            // tomark, line 163
            if (cursor < I_pV)
            {
                return 0;
            }
            cursor = I_pV;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 163
            // [, line 164
            ket = cursor;
            // substring, line 164
            among_var = find_among_b(a_5);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 164
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        {
                            limit_backward = c2;
                            return 0;
                        }
                    }
                case 1:
                    // (, line 170
                    if (out_grouping_b(g_v, 97, 251, false) != 0)
                    {
                        {
                            limit_backward = c2;
                            return 0;
                        }
                    }
                    // delete, line 170
                    slice_del();
                    break;
            }
            limit_backward = c2;

            return 1;
        }

        private int r_verb_suffix()
        {
            int among_var;
            // setlimit, line 174
            int c1 = limit - cursor;
            // tomark, line 174
            if (cursor < I_pV)
            {
                return 0;
            }
            cursor = I_pV;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 174
            // [, line 175
            ket = cursor;
            // substring, line 175
            among_var = find_among_b(a_6);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 175
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        {
                            limit_backward = c2;
                            return 0;
                        }
                    }
                case 1:
                    // (, line 177
                    {
                        // call R2, line 177
                        int ret = r_R2();
                        if (ret == 0)
                            {
                                limit_backward = c2;
                                return 0;
                            }
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 177
                    slice_del();
                    break;
                case 2:
                    // (, line 185
                    // delete, line 185
                    slice_del();
                    break;
                case 3:
                    // (, line 190
                    // delete, line 190
                    slice_del();
                    // try, line 191
                    {
                        int c3 = limit - cursor;
                        // (, line 191
                        // [, line 191
                        ket = cursor;
                        // literal, line 191
                        if (!(eq_s_b("e")))
                        {
                            {
                                cursor = limit - c3;
                                goto lab0;
                            }
                        }
                        // ], line 191
                        bra = cursor;
                        // delete, line 191
                        slice_del();
                    lab0: ; 
                    }
                    break;
            }
            limit_backward = c2;

            return 1;
        }

        private int r_residual_suffix()
        {
            int among_var;
            // (, line 198
            // try, line 199
            {
                int c1 = limit - cursor;
                // (, line 199
                // [, line 199
                ket = cursor;
                // literal, line 199
                if (!(eq_s_b("s")))
                {
                    {
                        cursor = limit - c1;
                        goto lab0;
                    }
                }
                // ], line 199
                bra = cursor;
                // test, line 199
                {
                    int c2 = limit - cursor;
                    if (out_grouping_b(g_keep_with_s, 97, 232, false) != 0)
                    {
                        {
                            cursor = limit - c1;
                            goto lab0;
                        }
                    }
                    cursor = limit - c2;
                }
                // delete, line 199
                slice_del();
            lab0: ; 
            }
            // setlimit, line 200
            int c3 = limit - cursor;
            // tomark, line 200
            if (cursor < I_pV)
            {
                return 0;
            }
            cursor = I_pV;
            int c4 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c3;
            // (, line 200
            // [, line 201
            ket = cursor;
            // substring, line 201
            among_var = find_among_b(a_7);
            if (among_var == 0)
            {
                {
                    limit_backward = c4;
                    return 0;
                }
            }
            // ], line 201
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        {
                            limit_backward = c4;
                            return 0;
                        }
                    }
                case 1:
                    // (, line 202
                    {
                        // call R2, line 202
                        int ret = r_R2();
                        if (ret == 0)
                            {
                                limit_backward = c4;
                                return 0;
                            }
                        else if (ret < 0)
                            return ret;
                    }
                    // or, line 202
                    {
                        int c5 = limit - cursor;
                        // literal, line 202
                        if (!(eq_s_b("s")))
                        {
                            goto lab2;
                        }
                        goto lab1;
                    lab2: ; 
                        cursor = limit - c5;
                        // literal, line 202
                        if (!(eq_s_b("t")))
                        {
                            {
                                limit_backward = c4;
                                return 0;
                            }
                        }
                    }
                lab1: ; 
                    // delete, line 202
                    slice_del();
                    break;
                case 2:
                    // (, line 204
                    // <-, line 204
                    slice_from("i");
                    break;
                case 3:
                    // (, line 205
                    // delete, line 205
                    slice_del();
                    break;
                case 4:
                    // (, line 206
                    // literal, line 206
                    if (!(eq_s_b("gu")))
                    {
                        {
                            limit_backward = c4;
                            return 0;
                        }
                    }
                    // delete, line 206
                    slice_del();
                    break;
            }
            limit_backward = c4;

            return 1;
        }

        private int r_un_double()
        {
            // (, line 211
            // test, line 212
            {
                int c1 = limit - cursor;
                // among, line 212
                if (find_among_b(a_8) == 0)
                {
                    return 0;
                }
                cursor = limit - c1;
            }
            // [, line 212
            ket = cursor;
            // next, line 212
            if (cursor <= limit_backward)
            {
                return 0;
            }
            cursor--;
            // ], line 212
            bra = cursor;
            // delete, line 212
            slice_del();

            return 1;
        }

        private int r_un_accent()
        {
            // (, line 215
            // atleast, line 216
            {
                int c1 = 1;
                // atleast, line 216
                while (true)
                {
                    if (out_grouping_b(g_v, 97, 251, false) != 0)
                    {
                        goto lab0;
                    }
                    c1--;
                    continue;
                lab0: ; 
                    break;
                }
                if (c1 > 0)
                {
                    return 0;
                }
            }
            // [, line 217
            ket = cursor;
            // or, line 217
            {
                int c3 = limit - cursor;
                // literal, line 217
                if (!(eq_s_b("\u00E9")))
                {
                    goto lab2;
                }
                goto lab1;
            lab2: ; 
                cursor = limit - c3;
                // literal, line 217
                if (!(eq_s_b("\u00E8")))
                {
                    return 0;
                }
            }
        lab1: ; 
            // ], line 217
            bra = cursor;
            // <-, line 217
            slice_from("e");

            return 1;
        }

        private int stem()
        {
            // (, line 221
            // do, line 223
            {
                int c1 = cursor;
                {
                    // call prelude, line 223
                    int ret = r_prelude();
                    if (ret == 0)
                        goto lab0;
                    else if (ret < 0)
                        return ret;
                }
            lab0: ; 
                cursor = c1;
            }
            // do, line 224
            {
                int c2 = cursor;
                {
                    // call mark_regions, line 224
                    int ret = r_mark_regions();
                    if (ret == 0)
                        goto lab1;
                    else if (ret < 0)
                        return ret;
                }
            lab1: ; 
                cursor = c2;
            }
            // backwards, line 225
            limit_backward = cursor; cursor = limit;
            // (, line 225
            // do, line 227
            {
                int c3 = limit - cursor;
                // (, line 227
                // or, line 237
                {
                    int c4 = limit - cursor;
                    // (, line 228
                    // and, line 233
                    int c5 = limit - cursor;
                    // (, line 229
                    // or, line 229
                    {
                        int c6 = limit - cursor;
                        {
                            // call standard_suffix, line 229
                            int ret = r_standard_suffix();
                            if (ret == 0)
                                goto lab6;
                            else if (ret < 0)
                                return ret;
                        }
                        goto lab5;
                    lab6: ; 
                        cursor = limit - c6;
                        {
                            // call i_verb_suffix, line 230
                            int ret = r_i_verb_suffix();
                            if (ret == 0)
                                goto lab7;
                            else if (ret < 0)
                                return ret;
                        }
                        goto lab5;
                    lab7: ; 
                        cursor = limit - c6;
                        {
                            // call verb_suffix, line 231
                            int ret = r_verb_suffix();
                            if (ret == 0)
                                goto lab4;
                            else if (ret < 0)
                                return ret;
                        }
                    }
                lab5: ; 
                    cursor = limit - c5;
                    // try, line 234
                    {
                        int c7 = limit - cursor;
                        // (, line 234
                        // [, line 234
                        ket = cursor;
                        // or, line 234
                        {
                            int c8 = limit - cursor;
                            // (, line 234
                            // literal, line 234
                            if (!(eq_s_b("Y")))
                            {
                                goto lab10;
                            }
                            // ], line 234
                            bra = cursor;
                            // <-, line 234
                            slice_from("i");
                            goto lab9;
                        lab10: ; 
                            cursor = limit - c8;
                            // (, line 235
                            // literal, line 235
                            if (!(eq_s_b("\u00E7")))
                            {
                                {
                                    cursor = limit - c7;
                                    goto lab8;
                                }
                            }
                            // ], line 235
                            bra = cursor;
                            // <-, line 235
                            slice_from("c");
                        }
                    lab9: ; 
                    lab8: ; 
                    }
                    goto lab3;
                lab4: ; 
                    cursor = limit - c4;
                    {
                        // call residual_suffix, line 238
                        int ret = r_residual_suffix();
                        if (ret == 0)
                            goto lab2;
                        else if (ret < 0)
                            return ret;
                    }
                }
            lab3: ; 
            lab2: ; 
                cursor = limit - c3;
            }
            // do, line 243
            {
                int c9 = limit - cursor;
                {
                    // call un_double, line 243
                    int ret = r_un_double();
                    if (ret == 0)
                        goto lab11;
                    else if (ret < 0)
                        return ret;
                }
            lab11: ; 
                cursor = limit - c9;
            }
            // do, line 244
            {
                int c10 = limit - cursor;
                {
                    // call un_accent, line 244
                    int ret = r_un_accent();
                    if (ret == 0)
                        goto lab12;
                    else if (ret < 0)
                        return ret;
                }
            lab12: ; 
                cursor = limit - c10;
            }
            cursor = limit_backward;
            // do, line 246
            {
                int c11 = cursor;
                {
                    // call postlude, line 246
                    int ret = r_postlude();
                    if (ret == 0)
                        goto lab13;
                    else if (ret < 0)
                        return ret;
                }
            lab13: ; 
                cursor = c11;
            }

            return 1;
        }

        /// <summary>
        ///   Stems the buffer's contents.
        /// </summary>
        /// 
        protected override bool Process()
        {
            return this.stem() > 0;
        }

    }
}

