// This file was generated automatically by the Snowball to C# compiler

#pragma warning disable 0164
#pragma warning disable 0162

namespace Accord.MachineLearning.Text.Stemmers
{
    using System;
    using System.Text;
    
    ///<summary>
    ///  This class was automatically generated by a Snowball to C# compiler 
    ///  It implements the stemming algorithm defined by a snowball script.
    ///</summary>
    /// 
    [System.CodeDom.Compiler.GeneratedCode("Snowball", "1.0.0")]
    public partial class RomanianStemmer : StemmerBase
    {
        private bool B_standard_suffix_removed;
        private int I_p2;
        private int I_p1;
        private int I_pV;

        private static string g_v = "aeiou\u00E2\u00EE\u0103";
        private readonly Among[] a_0;
        private readonly Among[] a_1;
        private readonly Among[] a_2;
        private readonly Among[] a_3;
        private readonly Among[] a_4;
        private readonly Among[] a_5;

        /// <summary>
        ///   Initializes a new instance of the <see cref="RomanianStemmer"/> class.
        /// </summary>
        /// 
        public RomanianStemmer()
        {
            a_0 = new[] 
            {
                new Among("", -1, 3),
                new Among("I", 0, 1),
                new Among("U", 0, 2)
            };

            a_1 = new[] 
            {
                new Among("ea", -1, 3),
                new Among("a\u0163ia", -1, 7),
                new Among("aua", -1, 2),
                new Among("iua", -1, 4),
                new Among("a\u0163ie", -1, 7),
                new Among("ele", -1, 3),
                new Among("ile", -1, 5),
                new Among("iile", 6, 4),
                new Among("iei", -1, 4),
                new Among("atei", -1, 6),
                new Among("ii", -1, 4),
                new Among("ului", -1, 1),
                new Among("ul", -1, 1),
                new Among("elor", -1, 3),
                new Among("ilor", -1, 4),
                new Among("iilor", 14, 4)
            };

            a_2 = new[] 
            {
                new Among("icala", -1, 4),
                new Among("iciva", -1, 4),
                new Among("ativa", -1, 5),
                new Among("itiva", -1, 6),
                new Among("icale", -1, 4),
                new Among("a\u0163iune", -1, 5),
                new Among("i\u0163iune", -1, 6),
                new Among("atoare", -1, 5),
                new Among("itoare", -1, 6),
                new Among("\u0103toare", -1, 5),
                new Among("icitate", -1, 4),
                new Among("abilitate", -1, 1),
                new Among("ibilitate", -1, 2),
                new Among("ivitate", -1, 3),
                new Among("icive", -1, 4),
                new Among("ative", -1, 5),
                new Among("itive", -1, 6),
                new Among("icali", -1, 4),
                new Among("atori", -1, 5),
                new Among("icatori", 18, 4),
                new Among("itori", -1, 6),
                new Among("\u0103tori", -1, 5),
                new Among("icitati", -1, 4),
                new Among("abilitati", -1, 1),
                new Among("ivitati", -1, 3),
                new Among("icivi", -1, 4),
                new Among("ativi", -1, 5),
                new Among("itivi", -1, 6),
                new Among("icit\u0103i", -1, 4),
                new Among("abilit\u0103i", -1, 1),
                new Among("ivit\u0103i", -1, 3),
                new Among("icit\u0103\u0163i", -1, 4),
                new Among("abilit\u0103\u0163i", -1, 1),
                new Among("ivit\u0103\u0163i", -1, 3),
                new Among("ical", -1, 4),
                new Among("ator", -1, 5),
                new Among("icator", 35, 4),
                new Among("itor", -1, 6),
                new Among("\u0103tor", -1, 5),
                new Among("iciv", -1, 4),
                new Among("ativ", -1, 5),
                new Among("itiv", -1, 6),
                new Among("ical\u0103", -1, 4),
                new Among("iciv\u0103", -1, 4),
                new Among("ativ\u0103", -1, 5),
                new Among("itiv\u0103", -1, 6)
            };

            a_3 = new[] 
            {
                new Among("ica", -1, 1),
                new Among("abila", -1, 1),
                new Among("ibila", -1, 1),
                new Among("oasa", -1, 1),
                new Among("ata", -1, 1),
                new Among("ita", -1, 1),
                new Among("anta", -1, 1),
                new Among("ista", -1, 3),
                new Among("uta", -1, 1),
                new Among("iva", -1, 1),
                new Among("ic", -1, 1),
                new Among("ice", -1, 1),
                new Among("abile", -1, 1),
                new Among("ibile", -1, 1),
                new Among("isme", -1, 3),
                new Among("iune", -1, 2),
                new Among("oase", -1, 1),
                new Among("ate", -1, 1),
                new Among("itate", 17, 1),
                new Among("ite", -1, 1),
                new Among("ante", -1, 1),
                new Among("iste", -1, 3),
                new Among("ute", -1, 1),
                new Among("ive", -1, 1),
                new Among("ici", -1, 1),
                new Among("abili", -1, 1),
                new Among("ibili", -1, 1),
                new Among("iuni", -1, 2),
                new Among("atori", -1, 1),
                new Among("osi", -1, 1),
                new Among("ati", -1, 1),
                new Among("itati", 30, 1),
                new Among("iti", -1, 1),
                new Among("anti", -1, 1),
                new Among("isti", -1, 3),
                new Among("uti", -1, 1),
                new Among("i\u015Fti", -1, 3),
                new Among("ivi", -1, 1),
                new Among("it\u0103i", -1, 1),
                new Among("o\u015Fi", -1, 1),
                new Among("it\u0103\u0163i", -1, 1),
                new Among("abil", -1, 1),
                new Among("ibil", -1, 1),
                new Among("ism", -1, 3),
                new Among("ator", -1, 1),
                new Among("os", -1, 1),
                new Among("at", -1, 1),
                new Among("it", -1, 1),
                new Among("ant", -1, 1),
                new Among("ist", -1, 3),
                new Among("ut", -1, 1),
                new Among("iv", -1, 1),
                new Among("ic\u0103", -1, 1),
                new Among("abil\u0103", -1, 1),
                new Among("ibil\u0103", -1, 1),
                new Among("oas\u0103", -1, 1),
                new Among("at\u0103", -1, 1),
                new Among("it\u0103", -1, 1),
                new Among("ant\u0103", -1, 1),
                new Among("ist\u0103", -1, 3),
                new Among("ut\u0103", -1, 1),
                new Among("iv\u0103", -1, 1)
            };

            a_4 = new[] 
            {
                new Among("ea", -1, 1),
                new Among("ia", -1, 1),
                new Among("esc", -1, 1),
                new Among("\u0103sc", -1, 1),
                new Among("ind", -1, 1),
                new Among("\u00E2nd", -1, 1),
                new Among("are", -1, 1),
                new Among("ere", -1, 1),
                new Among("ire", -1, 1),
                new Among("\u00E2re", -1, 1),
                new Among("se", -1, 2),
                new Among("ase", 10, 1),
                new Among("sese", 10, 2),
                new Among("ise", 10, 1),
                new Among("use", 10, 1),
                new Among("\u00E2se", 10, 1),
                new Among("e\u015Fte", -1, 1),
                new Among("\u0103\u015Fte", -1, 1),
                new Among("eze", -1, 1),
                new Among("ai", -1, 1),
                new Among("eai", 19, 1),
                new Among("iai", 19, 1),
                new Among("sei", -1, 2),
                new Among("e\u015Fti", -1, 1),
                new Among("\u0103\u015Fti", -1, 1),
                new Among("ui", -1, 1),
                new Among("ezi", -1, 1),
                new Among("\u00E2i", -1, 1),
                new Among("a\u015Fi", -1, 1),
                new Among("se\u015Fi", -1, 2),
                new Among("ase\u015Fi", 29, 1),
                new Among("sese\u015Fi", 29, 2),
                new Among("ise\u015Fi", 29, 1),
                new Among("use\u015Fi", 29, 1),
                new Among("\u00E2se\u015Fi", 29, 1),
                new Among("i\u015Fi", -1, 1),
                new Among("u\u015Fi", -1, 1),
                new Among("\u00E2\u015Fi", -1, 1),
                new Among("a\u0163i", -1, 2),
                new Among("ea\u0163i", 38, 1),
                new Among("ia\u0163i", 38, 1),
                new Among("e\u0163i", -1, 2),
                new Among("i\u0163i", -1, 2),
                new Among("\u00E2\u0163i", -1, 2),
                new Among("ar\u0103\u0163i", -1, 1),
                new Among("ser\u0103\u0163i", -1, 2),
                new Among("aser\u0103\u0163i", 45, 1),
                new Among("seser\u0103\u0163i", 45, 2),
                new Among("iser\u0103\u0163i", 45, 1),
                new Among("user\u0103\u0163i", 45, 1),
                new Among("\u00E2ser\u0103\u0163i", 45, 1),
                new Among("ir\u0103\u0163i", -1, 1),
                new Among("ur\u0103\u0163i", -1, 1),
                new Among("\u00E2r\u0103\u0163i", -1, 1),
                new Among("am", -1, 1),
                new Among("eam", 54, 1),
                new Among("iam", 54, 1),
                new Among("em", -1, 2),
                new Among("asem", 57, 1),
                new Among("sesem", 57, 2),
                new Among("isem", 57, 1),
                new Among("usem", 57, 1),
                new Among("\u00E2sem", 57, 1),
                new Among("im", -1, 2),
                new Among("\u00E2m", -1, 2),
                new Among("\u0103m", -1, 2),
                new Among("ar\u0103m", 65, 1),
                new Among("ser\u0103m", 65, 2),
                new Among("aser\u0103m", 67, 1),
                new Among("seser\u0103m", 67, 2),
                new Among("iser\u0103m", 67, 1),
                new Among("user\u0103m", 67, 1),
                new Among("\u00E2ser\u0103m", 67, 1),
                new Among("ir\u0103m", 65, 1),
                new Among("ur\u0103m", 65, 1),
                new Among("\u00E2r\u0103m", 65, 1),
                new Among("au", -1, 1),
                new Among("eau", 76, 1),
                new Among("iau", 76, 1),
                new Among("indu", -1, 1),
                new Among("\u00E2ndu", -1, 1),
                new Among("ez", -1, 1),
                new Among("easc\u0103", -1, 1),
                new Among("ar\u0103", -1, 1),
                new Among("ser\u0103", -1, 2),
                new Among("aser\u0103", 84, 1),
                new Among("seser\u0103", 84, 2),
                new Among("iser\u0103", 84, 1),
                new Among("user\u0103", 84, 1),
                new Among("\u00E2ser\u0103", 84, 1),
                new Among("ir\u0103", -1, 1),
                new Among("ur\u0103", -1, 1),
                new Among("\u00E2r\u0103", -1, 1),
                new Among("eaz\u0103", -1, 1)
            };

            a_5 = new[] 
            {
                new Among("a", -1, 1),
                new Among("e", -1, 1),
                new Among("ie", 1, 1),
                new Among("i", -1, 1),
                new Among("\u0103", -1, 1)
            };

        }



        private int r_prelude()
        {
            // (, line 31
            // repeat, line 32
            while (true)
            {
                int c1 = cursor;
                while (true)
                {
                    // goto, line 32
                    int c2 = cursor;
                    // (, line 32
                    if (in_grouping(g_v, 97, 259, false) != 0)
                    {
                        goto lab1;
                    }
                    // [, line 33
                    bra = cursor;
                    // or, line 33
                    {
                        int c3 = cursor;
                        // (, line 33
                        // literal, line 33
                        if (!(eq_s("u")))
                        {
                            goto lab3;
                        }
                        // ], line 33
                        ket = cursor;
                        if (in_grouping(g_v, 97, 259, false) != 0)
                        {
                            goto lab3;
                        }
                        // <-, line 33
                        slice_from("U");
                        goto lab2;
                    lab3: ; 
                        cursor = c3;
                        // (, line 34
                        // literal, line 34
                        if (!(eq_s("i")))
                        {
                            goto lab1;
                        }
                        // ], line 34
                        ket = cursor;
                        if (in_grouping(g_v, 97, 259, false) != 0)
                        {
                            goto lab1;
                        }
                        // <-, line 34
                        slice_from("I");
                    }
                lab2: ; 
                    cursor = c2;
                    break;
                lab1: ; 
                    cursor = c2;
                    // goto, line 32
                    if (cursor >= limit)
                    {
                        goto lab0;
                    }
                    cursor++;
                }
                continue;
            lab0: ; 
                cursor = c1;
                break;
            }

            return 1;
        }

        private int r_mark_regions()
        {
            // (, line 38
            I_pV = limit;
            I_p1 = limit;
            I_p2 = limit;
            // do, line 44
            {
                int c1 = cursor;
                // (, line 44
                // or, line 46
                {
                    int c2 = cursor;
                    // (, line 45
                    if (in_grouping(g_v, 97, 259, false) != 0)
                    {
                        goto lab2;
                    }
                    // or, line 45
                    {
                        int c3 = cursor;
                        // (, line 45
                        if (out_grouping(g_v, 97, 259, false) != 0)
                        {
                            goto lab4;
                        }
                        {
                            /* gopast */ 
                            int ret = out_grouping(g_v, 97, 259, true);
                            if (ret < 0)
                            {
                                goto lab4;
                            }

                            cursor += ret;
                        }
                        goto lab3;
                    lab4: ; 
                        cursor = c3;
                        // (, line 45
                        if (in_grouping(g_v, 97, 259, false) != 0)
                        {
                            goto lab2;
                        }
                        {
                            /* gopast */ 
                            int ret = in_grouping(g_v, 97, 259, true);
                            if (ret < 0)
                            {
                                goto lab2;
                            }

                            cursor += ret;
                        }
                    }
                lab3: ; 
                    goto lab1;
                lab2: ; 
                    cursor = c2;
                    // (, line 47
                    if (out_grouping(g_v, 97, 259, false) != 0)
                    {
                        goto lab0;
                    }
                    // or, line 47
                    {
                        int c6 = cursor;
                        // (, line 47
                        if (out_grouping(g_v, 97, 259, false) != 0)
                        {
                            goto lab6;
                        }
                        {
                            /* gopast */ 
                            int ret = out_grouping(g_v, 97, 259, true);
                            if (ret < 0)
                            {
                                goto lab6;
                            }

                            cursor += ret;
                        }
                        goto lab5;
                    lab6: ; 
                        cursor = c6;
                        // (, line 47
                        if (in_grouping(g_v, 97, 259, false) != 0)
                        {
                            goto lab0;
                        }
                        // next, line 47
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                    }
                lab5: ; 
                }
            lab1: ; 
                // setmark pV, line 48
                I_pV = cursor;
            lab0: ; 
                cursor = c1;
            }
            // do, line 50
            {
                int c8 = cursor;
                // (, line 50
                {
                    /* gopast */ 
                    int ret = out_grouping(g_v, 97, 259, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                {
                    /* gopast */ 
                    int ret = in_grouping(g_v, 97, 259, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                // setmark p1, line 51
                I_p1 = cursor;
                {
                    /* gopast */ 
                    int ret = out_grouping(g_v, 97, 259, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                {
                    /* gopast */ 
                    int ret = in_grouping(g_v, 97, 259, true);
                    if (ret < 0)
                    {
                        goto lab7;
                    }

                    cursor += ret;
                }
                // setmark p2, line 52
                I_p2 = cursor;
            lab7: ; 
                cursor = c8;
            }

            return 1;
        }

        private int r_postlude()
        {
            int among_var;
            // repeat, line 56
            while (true)
            {
                int c1 = cursor;
                // (, line 56
                // [, line 58
                bra = cursor;
                // substring, line 58
                among_var = find_among(a_0);
                if (among_var == 0)
                {
                    goto lab0;
                }
                // ], line 58
                ket = cursor;
                switch (among_var) 
                {
                    case 0:
                        {
                            goto lab0;
                        }
                    case 1:
                        // (, line 59
                        // <-, line 59
                        slice_from("i");
                        break;
                    case 2:
                        // (, line 60
                        // <-, line 60
                        slice_from("u");
                        break;
                    case 3:
                        // (, line 61
                        // next, line 61
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                        break;
                }
                continue;
            lab0: ; 
                cursor = c1;
                break;
            }

            return 1;
        }

        private int r_RV()
        {
            if (!(I_pV <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_R1()
        {
            if (!(I_p1 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_R2()
        {
            if (!(I_p2 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_step_0()
        {
            int among_var;
            // (, line 72
            // [, line 73
            ket = cursor;
            // substring, line 73
            among_var = find_among_b(a_1);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 73
            bra = cursor;
            {
                // call R1, line 73
                int ret = r_R1();
                if (ret == 0)
                    return 0;
                else if (ret < 0)
                    return ret;
            }
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 75
                    // delete, line 75
                    slice_del();
                    break;
                case 2:
                    // (, line 77
                    // <-, line 77
                    slice_from("a");
                    break;
                case 3:
                    // (, line 79
                    // <-, line 79
                    slice_from("e");
                    break;
                case 4:
                    // (, line 81
                    // <-, line 81
                    slice_from("i");
                    break;
                case 5:
                    // (, line 83
                    // not, line 83
                    {
                        int c1 = limit - cursor;
                        // literal, line 83
                        if (!(eq_s_b("ab")))
                        {
                            goto lab0;
                        }
                        return 0;
                    lab0: ; 
                        cursor = limit - c1;
                    }
                    // <-, line 83
                    slice_from("i");
                    break;
                case 6:
                    // (, line 85
                    // <-, line 85
                    slice_from("at");
                    break;
                case 7:
                    // (, line 87
                    // <-, line 87
                    slice_from("a\u0163i");
                    break;
            }

            return 1;
        }

        private int r_combo_suffix()
        {
            int among_var;
            // test, line 91
            {
                int c1 = limit - cursor;
                // (, line 91
                // [, line 92
                ket = cursor;
                // substring, line 92
                among_var = find_among_b(a_2);
                if (among_var == 0)
                {
                    return 0;
                }
                // ], line 92
                bra = cursor;
                {
                    // call R1, line 92
                    int ret = r_R1();
                    if (ret == 0)
                        return 0;
                    else if (ret < 0)
                        return ret;
                }
                // (, line 92
                switch (among_var) 
                {
                    case 0:
                        {
                            return 0;
                        }
                    case 1:
                        // (, line 100
                        // <-, line 101
                        slice_from("abil");
                        break;
                    case 2:
                        // (, line 103
                        // <-, line 104
                        slice_from("ibil");
                        break;
                    case 3:
                        // (, line 106
                        // <-, line 107
                        slice_from("iv");
                        break;
                    case 4:
                        // (, line 112
                        // <-, line 113
                        slice_from("ic");
                        break;
                    case 5:
                        // (, line 117
                        // <-, line 118
                        slice_from("at");
                        break;
                    case 6:
                        // (, line 121
                        // <-, line 122
                        slice_from("it");
                        break;
                }
                // set standard_suffix_removed, line 125
                B_standard_suffix_removed = true;
                cursor = limit - c1;
            }

            return 1;
        }

        private int r_standard_suffix()
        {
            int among_var;
            // (, line 129
            // unset standard_suffix_removed, line 130
            B_standard_suffix_removed = false;
            // repeat, line 131
            while (true)
            {
                int c1 = limit - cursor;
                {
                    // call combo_suffix, line 131
                    int ret = r_combo_suffix();
                    if (ret == 0)
                        goto lab0;
                    else if (ret < 0)
                        return ret;
                }
                continue;
            lab0: ; 
                cursor = limit - c1;
                break;
            }
            // [, line 132
            ket = cursor;
            // substring, line 132
            among_var = find_among_b(a_3);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 132
            bra = cursor;
            {
                // call R2, line 132
                int ret = r_R2();
                if (ret == 0)
                    return 0;
                else if (ret < 0)
                    return ret;
            }
            // (, line 132
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 148
                    // delete, line 149
                    slice_del();
                    break;
                case 2:
                    // (, line 151
                    // literal, line 152
                    if (!(eq_s_b("\u0163")))
                    {
                        return 0;
                    }
                    // ], line 152
                    bra = cursor;
                    // <-, line 152
                    slice_from("t");
                    break;
                case 3:
                    // (, line 155
                    // <-, line 156
                    slice_from("ist");
                    break;
            }
            // set standard_suffix_removed, line 160
            B_standard_suffix_removed = true;

            return 1;
        }

        private int r_verb_suffix()
        {
            int among_var;
            // setlimit, line 164
            int c1 = limit - cursor;
            // tomark, line 164
            if (cursor < I_pV)
            {
                return 0;
            }
            cursor = I_pV;
            int c2 = limit_backward;
            limit_backward = cursor;
            cursor = limit - c1;
            // (, line 164
            // [, line 165
            ket = cursor;
            // substring, line 165
            among_var = find_among_b(a_4);
            if (among_var == 0)
            {
                {
                    limit_backward = c2;
                    return 0;
                }
            }
            // ], line 165
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        {
                            limit_backward = c2;
                            return 0;
                        }
                    }
                case 1:
                    // (, line 200
                    // or, line 200
                    {
                        int c3 = limit - cursor;
                        if (out_grouping_b(g_v, 97, 259, false) != 0)
                        {
                            goto lab1;
                        }
                        goto lab0;
                    lab1: ; 
                        cursor = limit - c3;
                        // literal, line 200
                        if (!(eq_s_b("u")))
                        {
                            {
                                limit_backward = c2;
                                return 0;
                            }
                        }
                    }
                lab0: ; 
                    // delete, line 200
                    slice_del();
                    break;
                case 2:
                    // (, line 214
                    // delete, line 214
                    slice_del();
                    break;
            }
            limit_backward = c2;

            return 1;
        }

        private int r_vowel_suffix()
        {
            int among_var;
            // (, line 218
            // [, line 219
            ket = cursor;
            // substring, line 219
            among_var = find_among_b(a_5);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 219
            bra = cursor;
            {
                // call RV, line 219
                int ret = r_RV();
                if (ret == 0)
                    return 0;
                else if (ret < 0)
                    return ret;
            }
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 220
                    // delete, line 220
                    slice_del();
                    break;
            }

            return 1;
        }

        private int stem()
        {
            // (, line 225
            // do, line 226
            {
                int c1 = cursor;
                {
                    // call prelude, line 226
                    int ret = r_prelude();
                    if (ret == 0)
                        goto lab0;
                    else if (ret < 0)
                        return ret;
                }
            lab0: ; 
                cursor = c1;
            }
            // do, line 227
            {
                int c2 = cursor;
                {
                    // call mark_regions, line 227
                    int ret = r_mark_regions();
                    if (ret == 0)
                        goto lab1;
                    else if (ret < 0)
                        return ret;
                }
            lab1: ; 
                cursor = c2;
            }
            // backwards, line 228
            limit_backward = cursor; cursor = limit;
            // (, line 228
            // do, line 229
            {
                int c3 = limit - cursor;
                {
                    // call step_0, line 229
                    int ret = r_step_0();
                    if (ret == 0)
                        goto lab2;
                    else if (ret < 0)
                        return ret;
                }
            lab2: ; 
                cursor = limit - c3;
            }
            // do, line 230
            {
                int c4 = limit - cursor;
                {
                    // call standard_suffix, line 230
                    int ret = r_standard_suffix();
                    if (ret == 0)
                        goto lab3;
                    else if (ret < 0)
                        return ret;
                }
            lab3: ; 
                cursor = limit - c4;
            }
            // do, line 231
            {
                int c5 = limit - cursor;
                // (, line 231
                // or, line 231
                {
                    int c6 = limit - cursor;
                    // Boolean test standard_suffix_removed, line 231
                    if (!(B_standard_suffix_removed))
                    {
                        goto lab6;
                    }
                    goto lab5;
                lab6: ; 
                    cursor = limit - c6;
                    {
                        // call verb_suffix, line 231
                        int ret = r_verb_suffix();
                        if (ret == 0)
                            goto lab4;
                        else if (ret < 0)
                            return ret;
                    }
                }
            lab5: ; 
            lab4: ; 
                cursor = limit - c5;
            }
            // do, line 232
            {
                int c7 = limit - cursor;
                {
                    // call vowel_suffix, line 232
                    int ret = r_vowel_suffix();
                    if (ret == 0)
                        goto lab7;
                    else if (ret < 0)
                        return ret;
                }
            lab7: ; 
                cursor = limit - c7;
            }
            cursor = limit_backward;
            // do, line 234
            {
                int c8 = cursor;
                {
                    // call postlude, line 234
                    int ret = r_postlude();
                    if (ret == 0)
                        goto lab8;
                    else if (ret < 0)
                        return ret;
                }
            lab8: ; 
                cursor = c8;
            }

            return 1;
        }

        /// <summary>
        ///   Stems the buffer's contents.
        /// </summary>
        /// 
        protected override bool Process()
        {
            return this.stem() > 0;
        }

    }
}

