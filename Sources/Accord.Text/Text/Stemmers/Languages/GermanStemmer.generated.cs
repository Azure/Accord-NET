// This file was generated automatically by the Snowball to C# compiler

#pragma warning disable 0164
#pragma warning disable 0162

namespace Accord.MachineLearning.Text.Stemmers
{
    using System;
    using System.Text;
    
    ///<summary>
    ///  This class was automatically generated by a Snowball to C# compiler 
    ///  It implements the stemming algorithm defined by a snowball script.
    ///</summary>
    /// 
    [System.CodeDom.Compiler.GeneratedCode("Snowball", "1.0.0")]
    public partial class GermanStemmer : StemmerBase
    {
        private int I_x;
        private int I_p2;
        private int I_p1;

        private static string g_v = "aeiouy\u00E4\u00F6\u00FC";
        private static string g_s_ending = "bdfghklmnrt";
        private static string g_st_ending = "bdfghklmnt";
        private readonly Among[] a_0;
        private readonly Among[] a_1;
        private readonly Among[] a_2;
        private readonly Among[] a_3;
        private readonly Among[] a_4;

        /// <summary>
        ///   Initializes a new instance of the <see cref="GermanStemmer"/> class.
        /// </summary>
        /// 
        public GermanStemmer()
        {
            a_0 = new[] 
            {
                new Among("", -1, 6),
                new Among("U", 0, 2),
                new Among("Y", 0, 1),
                new Among("\u00E4", 0, 3),
                new Among("\u00F6", 0, 4),
                new Among("\u00FC", 0, 5)
            };

            a_1 = new[] 
            {
                new Among("e", -1, 2),
                new Among("em", -1, 1),
                new Among("en", -1, 2),
                new Among("ern", -1, 1),
                new Among("er", -1, 1),
                new Among("s", -1, 3),
                new Among("es", 5, 2)
            };

            a_2 = new[] 
            {
                new Among("en", -1, 1),
                new Among("er", -1, 1),
                new Among("st", -1, 2),
                new Among("est", 2, 1)
            };

            a_3 = new[] 
            {
                new Among("ig", -1, 1),
                new Among("lich", -1, 1)
            };

            a_4 = new[] 
            {
                new Among("end", -1, 1),
                new Among("ig", -1, 2),
                new Among("ung", -1, 1),
                new Among("lich", -1, 3),
                new Among("isch", -1, 2),
                new Among("ik", -1, 2),
                new Among("heit", -1, 3),
                new Among("keit", -1, 4)
            };

        }



        private int r_prelude()
        {
            // (, line 33
            // test, line 35
            {
                int c1 = cursor;
                // repeat, line 35
                while (true)
                {
                    int c2 = cursor;
                    // (, line 35
                    // or, line 38
                    {
                        int c3 = cursor;
                        // (, line 36
                        // [, line 37
                        bra = cursor;
                        // literal, line 37
                        if (!(eq_s("\u00DF")))
                        {
                            goto lab2;
                        }
                        // ], line 37
                        ket = cursor;
                        // <-, line 37
                        slice_from("ss");
                        goto lab1;
                    lab2: ; 
                        cursor = c3;
                        // next, line 38
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                    }
                lab1: ; 
                    continue;
                lab0: ; 
                    cursor = c2;
                    break;
                }
                cursor = c1;
            }
            // repeat, line 41
            while (true)
            {
                int c4 = cursor;
                while (true)
                {
                    // goto, line 41
                    int c5 = cursor;
                    // (, line 41
                    if (in_grouping(g_v, 97, 252, false) != 0)
                    {
                        goto lab4;
                    }
                    // [, line 42
                    bra = cursor;
                    // or, line 42
                    {
                        int c6 = cursor;
                        // (, line 42
                        // literal, line 42
                        if (!(eq_s("u")))
                        {
                            goto lab6;
                        }
                        // ], line 42
                        ket = cursor;
                        if (in_grouping(g_v, 97, 252, false) != 0)
                        {
                            goto lab6;
                        }
                        // <-, line 42
                        slice_from("U");
                        goto lab5;
                    lab6: ; 
                        cursor = c6;
                        // (, line 43
                        // literal, line 43
                        if (!(eq_s("y")))
                        {
                            goto lab4;
                        }
                        // ], line 43
                        ket = cursor;
                        if (in_grouping(g_v, 97, 252, false) != 0)
                        {
                            goto lab4;
                        }
                        // <-, line 43
                        slice_from("Y");
                    }
                lab5: ; 
                    cursor = c5;
                    break;
                lab4: ; 
                    cursor = c5;
                    // goto, line 41
                    if (cursor >= limit)
                    {
                        goto lab3;
                    }
                    cursor++;
                }
                continue;
            lab3: ; 
                cursor = c4;
                break;
            }

            return 1;
        }

        private int r_mark_regions()
        {
            // (, line 47
            I_p1 = limit;
            I_p2 = limit;
            // test, line 52
            {
                int c1 = cursor;
                // (, line 52
                // hop, line 52
                {
                    int ret = cursor + 3;
                    if (0 > ret || ret > limit)
                    {
                        return 0;
                    }
                    cursor = ret;
                }
                // setmark x, line 52
                I_x = cursor;
                cursor = c1;
            }
            {
                /* gopast */ 
                int ret = out_grouping(g_v, 97, 252, true);
                if (ret < 0)
                {
                    return 0;
                }

                cursor += ret;
            }
            {
                /* gopast */ 
                int ret = in_grouping(g_v, 97, 252, true);
                if (ret < 0)
                {
                    return 0;
                }

                cursor += ret;
            }
            // setmark p1, line 54
            I_p1 = cursor;
            // try, line 55
            // (, line 55
            if (!(I_p1 < I_x))
            {
                goto lab0;
            }
            I_p1 = I_x;
        lab0: ; 
            {
                /* gopast */ 
                int ret = out_grouping(g_v, 97, 252, true);
                if (ret < 0)
                {
                    return 0;
                }

                cursor += ret;
            }
            {
                /* gopast */ 
                int ret = in_grouping(g_v, 97, 252, true);
                if (ret < 0)
                {
                    return 0;
                }

                cursor += ret;
            }
            // setmark p2, line 56
            I_p2 = cursor;

            return 1;
        }

        private int r_postlude()
        {
            int among_var;
            // repeat, line 60
            while (true)
            {
                int c1 = cursor;
                // (, line 60
                // [, line 62
                bra = cursor;
                // substring, line 62
                among_var = find_among(a_0);
                if (among_var == 0)
                {
                    goto lab0;
                }
                // ], line 62
                ket = cursor;
                switch (among_var) 
                {
                    case 0:
                        {
                            goto lab0;
                        }
                    case 1:
                        // (, line 63
                        // <-, line 63
                        slice_from("y");
                        break;
                    case 2:
                        // (, line 64
                        // <-, line 64
                        slice_from("u");
                        break;
                    case 3:
                        // (, line 65
                        // <-, line 65
                        slice_from("a");
                        break;
                    case 4:
                        // (, line 66
                        // <-, line 66
                        slice_from("o");
                        break;
                    case 5:
                        // (, line 67
                        // <-, line 67
                        slice_from("u");
                        break;
                    case 6:
                        // (, line 68
                        // next, line 68
                        if (cursor >= limit)
                        {
                            goto lab0;
                        }
                        cursor++;
                        break;
                }
                continue;
            lab0: ; 
                cursor = c1;
                break;
            }

            return 1;
        }

        private int r_R1()
        {
            if (!(I_p1 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_R2()
        {
            if (!(I_p2 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_standard_suffix()
        {
            int among_var;
            // (, line 78
            // do, line 79
            {
                int c1 = limit - cursor;
                // (, line 79
                // [, line 80
                ket = cursor;
                // substring, line 80
                among_var = find_among_b(a_1);
                if (among_var == 0)
                {
                    goto lab0;
                }
                // ], line 80
                bra = cursor;
                {
                    // call R1, line 80
                    int ret = r_R1();
                    if (ret == 0)
                        goto lab0;
                    else if (ret < 0)
                        return ret;
                }
                switch (among_var) 
                {
                    case 0:
                        {
                            goto lab0;
                        }
                    case 1:
                        // (, line 82
                        // delete, line 82
                        slice_del();
                        break;
                    case 2:
                        // (, line 85
                        // delete, line 85
                        slice_del();
                        // try, line 86
                        {
                            int c2 = limit - cursor;
                            // (, line 86
                            // [, line 86
                            ket = cursor;
                            // literal, line 86
                            if (!(eq_s_b("s")))
                            {
                                {
                                    cursor = limit - c2;
                                    goto lab1;
                                }
                            }
                            // ], line 86
                            bra = cursor;
                            // literal, line 86
                            if (!(eq_s_b("nis")))
                            {
                                {
                                    cursor = limit - c2;
                                    goto lab1;
                                }
                            }
                            // delete, line 86
                            slice_del();
                        lab1: ; 
                        }
                        break;
                    case 3:
                        // (, line 89
                        if (in_grouping_b(g_s_ending, 98, 116, false) != 0)
                        {
                            goto lab0;
                        }
                        // delete, line 89
                        slice_del();
                        break;
                }
            lab0: ; 
                cursor = limit - c1;
            }
            // do, line 93
            {
                int c3 = limit - cursor;
                // (, line 93
                // [, line 94
                ket = cursor;
                // substring, line 94
                among_var = find_among_b(a_2);
                if (among_var == 0)
                {
                    goto lab2;
                }
                // ], line 94
                bra = cursor;
                {
                    // call R1, line 94
                    int ret = r_R1();
                    if (ret == 0)
                        goto lab2;
                    else if (ret < 0)
                        return ret;
                }
                switch (among_var) 
                {
                    case 0:
                        {
                            goto lab2;
                        }
                    case 1:
                        // (, line 96
                        // delete, line 96
                        slice_del();
                        break;
                    case 2:
                        // (, line 99
                        if (in_grouping_b(g_st_ending, 98, 116, false) != 0)
                        {
                            goto lab2;
                        }
                        // hop, line 99
                        {
                            int ret = cursor - 3;
                            if (limit_backward > ret || ret > limit)
                            {
                                goto lab2;
                            }
                            cursor = ret;
                        }
                        // delete, line 99
                        slice_del();
                        break;
                }
            lab2: ; 
                cursor = limit - c3;
            }
            // do, line 103
            {
                int c4 = limit - cursor;
                // (, line 103
                // [, line 104
                ket = cursor;
                // substring, line 104
                among_var = find_among_b(a_4);
                if (among_var == 0)
                {
                    goto lab3;
                }
                // ], line 104
                bra = cursor;
                {
                    // call R2, line 104
                    int ret = r_R2();
                    if (ret == 0)
                        goto lab3;
                    else if (ret < 0)
                        return ret;
                }
                switch (among_var) 
                {
                    case 0:
                        {
                            goto lab3;
                        }
                    case 1:
                        // (, line 106
                        // delete, line 106
                        slice_del();
                        // try, line 107
                        {
                            int c5 = limit - cursor;
                            // (, line 107
                            // [, line 107
                            ket = cursor;
                            // literal, line 107
                            if (!(eq_s_b("ig")))
                            {
                                {
                                    cursor = limit - c5;
                                    goto lab4;
                                }
                            }
                            // ], line 107
                            bra = cursor;
                            // not, line 107
                            {
                                int c6 = limit - cursor;
                                // literal, line 107
                                if (!(eq_s_b("e")))
                                {
                                    goto lab5;
                                }
                                {
                                    cursor = limit - c5;
                                    goto lab4;
                                }
                            lab5: ; 
                                cursor = limit - c6;
                            }
                            {
                                // call R2, line 107
                                int ret = r_R2();
                                if (ret == 0)
                                    {
                                        cursor = limit - c5;
                                        goto lab4;
                                    }
                                else if (ret < 0)
                                    return ret;
                            }
                            // delete, line 107
                            slice_del();
                        lab4: ; 
                        }
                        break;
                    case 2:
                        // (, line 110
                        // not, line 110
                        {
                            int c7 = limit - cursor;
                            // literal, line 110
                            if (!(eq_s_b("e")))
                            {
                                goto lab6;
                            }
                            goto lab3;
                        lab6: ; 
                            cursor = limit - c7;
                        }
                        // delete, line 110
                        slice_del();
                        break;
                    case 3:
                        // (, line 113
                        // delete, line 113
                        slice_del();
                        // try, line 114
                        {
                            int c8 = limit - cursor;
                            // (, line 114
                            // [, line 115
                            ket = cursor;
                            // or, line 115
                            {
                                int c9 = limit - cursor;
                                // literal, line 115
                                if (!(eq_s_b("er")))
                                {
                                    goto lab9;
                                }
                                goto lab8;
                            lab9: ; 
                                cursor = limit - c9;
                                // literal, line 115
                                if (!(eq_s_b("en")))
                                {
                                    {
                                        cursor = limit - c8;
                                        goto lab7;
                                    }
                                }
                            }
                        lab8: ; 
                            // ], line 115
                            bra = cursor;
                            {
                                // call R1, line 115
                                int ret = r_R1();
                                if (ret == 0)
                                    {
                                        cursor = limit - c8;
                                        goto lab7;
                                    }
                                else if (ret < 0)
                                    return ret;
                            }
                            // delete, line 115
                            slice_del();
                        lab7: ; 
                        }
                        break;
                    case 4:
                        // (, line 119
                        // delete, line 119
                        slice_del();
                        // try, line 120
                        {
                            int c10 = limit - cursor;
                            // (, line 120
                            // [, line 121
                            ket = cursor;
                            // substring, line 121
                            among_var = find_among_b(a_3);
                            if (among_var == 0)
                            {
                                {
                                    cursor = limit - c10;
                                    goto lab10;
                                }
                            }
                            // ], line 121
                            bra = cursor;
                            {
                                // call R2, line 121
                                int ret = r_R2();
                                if (ret == 0)
                                    {
                                        cursor = limit - c10;
                                        goto lab10;
                                    }
                                else if (ret < 0)
                                    return ret;
                            }
                            switch (among_var) 
                            {
                                case 0:
                                    {
                                        {
                                            cursor = limit - c10;
                                            goto lab10;
                                        }
                                    }
                                case 1:
                                    // (, line 123
                                    // delete, line 123
                                    slice_del();
                                    break;
                            }
                        lab10: ; 
                        }
                        break;
                }
            lab3: ; 
                cursor = limit - c4;
            }

            return 1;
        }

        private int stem()
        {
            // (, line 133
            // do, line 134
            {
                int c1 = cursor;
                {
                    // call prelude, line 134
                    int ret = r_prelude();
                    if (ret == 0)
                        goto lab0;
                    else if (ret < 0)
                        return ret;
                }
            lab0: ; 
                cursor = c1;
            }
            // do, line 135
            {
                int c2 = cursor;
                {
                    // call mark_regions, line 135
                    int ret = r_mark_regions();
                    if (ret == 0)
                        goto lab1;
                    else if (ret < 0)
                        return ret;
                }
            lab1: ; 
                cursor = c2;
            }
            // backwards, line 136
            limit_backward = cursor; cursor = limit;
            // do, line 137
            {
                int c3 = limit - cursor;
                {
                    // call standard_suffix, line 137
                    int ret = r_standard_suffix();
                    if (ret == 0)
                        goto lab2;
                    else if (ret < 0)
                        return ret;
                }
            lab2: ; 
                cursor = limit - c3;
            }
            cursor = limit_backward;
            // do, line 138
            {
                int c4 = cursor;
                {
                    // call postlude, line 138
                    int ret = r_postlude();
                    if (ret == 0)
                        goto lab3;
                    else if (ret < 0)
                        return ret;
                }
            lab3: ; 
                cursor = c4;
            }

            return 1;
        }

        /// <summary>
        ///   Stems the buffer's contents.
        /// </summary>
        /// 
        protected override bool Process()
        {
            return this.stem() > 0;
        }

    }
}

