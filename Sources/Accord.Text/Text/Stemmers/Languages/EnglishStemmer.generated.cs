// This file was generated automatically by the Snowball to C# compiler

#pragma warning disable 0164
#pragma warning disable 0162

namespace Accord.MachineLearning.Text.Stemmers
{
    using System;
    using System.Text;
    
    ///<summary>
    ///  This class was automatically generated by a Snowball to C# compiler 
    ///  It implements the stemming algorithm defined by a snowball script.
    ///</summary>
    /// 
    [System.CodeDom.Compiler.GeneratedCode("Snowball", "1.0.0")]
    public partial class EnglishStemmer : StemmerBase
    {
        private bool B_Y_found;
        private int I_p2;
        private int I_p1;

        private static string g_v = "aeiouy";
        private static string g_v_WXY = "aeiouywxY";
        private static string g_valid_LI = "cdeghkmnrt";
        private readonly Among[] a_0;
        private readonly Among[] a_1;
        private readonly Among[] a_2;
        private readonly Among[] a_3;
        private readonly Among[] a_4;
        private readonly Among[] a_5;
        private readonly Among[] a_6;
        private readonly Among[] a_7;
        private readonly Among[] a_8;
        private readonly Among[] a_9;
        private readonly Among[] a_10;

        /// <summary>
        ///   Initializes a new instance of the <see cref="EnglishStemmer"/> class.
        /// </summary>
        /// 
        public EnglishStemmer()
        {
            a_0 = new[] 
            {
                new Among("arsen", -1, -1),
                new Among("commun", -1, -1),
                new Among("gener", -1, -1)
            };

            a_1 = new[] 
            {
                new Among("'", -1, 1),
                new Among("'s'", 0, 1),
                new Among("'s", -1, 1)
            };

            a_2 = new[] 
            {
                new Among("ied", -1, 2),
                new Among("s", -1, 3),
                new Among("ies", 1, 2),
                new Among("sses", 1, 1),
                new Among("ss", 1, -1),
                new Among("us", 1, -1)
            };

            a_3 = new[] 
            {
                new Among("", -1, 3),
                new Among("bb", 0, 2),
                new Among("dd", 0, 2),
                new Among("ff", 0, 2),
                new Among("gg", 0, 2),
                new Among("bl", 0, 1),
                new Among("mm", 0, 2),
                new Among("nn", 0, 2),
                new Among("pp", 0, 2),
                new Among("rr", 0, 2),
                new Among("at", 0, 1),
                new Among("tt", 0, 2),
                new Among("iz", 0, 1)
            };

            a_4 = new[] 
            {
                new Among("ed", -1, 2),
                new Among("eed", 0, 1),
                new Among("ing", -1, 2),
                new Among("edly", -1, 2),
                new Among("eedly", 3, 1),
                new Among("ingly", -1, 2)
            };

            a_5 = new[] 
            {
                new Among("anci", -1, 3),
                new Among("enci", -1, 2),
                new Among("ogi", -1, 13),
                new Among("li", -1, 16),
                new Among("bli", 3, 12),
                new Among("abli", 4, 4),
                new Among("alli", 3, 8),
                new Among("fulli", 3, 14),
                new Among("lessli", 3, 15),
                new Among("ousli", 3, 10),
                new Among("entli", 3, 5),
                new Among("aliti", -1, 8),
                new Among("biliti", -1, 12),
                new Among("iviti", -1, 11),
                new Among("tional", -1, 1),
                new Among("ational", 14, 7),
                new Among("alism", -1, 8),
                new Among("ation", -1, 7),
                new Among("ization", 17, 6),
                new Among("izer", -1, 6),
                new Among("ator", -1, 7),
                new Among("iveness", -1, 11),
                new Among("fulness", -1, 9),
                new Among("ousness", -1, 10)
            };

            a_6 = new[] 
            {
                new Among("icate", -1, 4),
                new Among("ative", -1, 6),
                new Among("alize", -1, 3),
                new Among("iciti", -1, 4),
                new Among("ical", -1, 4),
                new Among("tional", -1, 1),
                new Among("ational", 5, 2),
                new Among("ful", -1, 5),
                new Among("ness", -1, 5)
            };

            a_7 = new[] 
            {
                new Among("ic", -1, 1),
                new Among("ance", -1, 1),
                new Among("ence", -1, 1),
                new Among("able", -1, 1),
                new Among("ible", -1, 1),
                new Among("ate", -1, 1),
                new Among("ive", -1, 1),
                new Among("ize", -1, 1),
                new Among("iti", -1, 1),
                new Among("al", -1, 1),
                new Among("ism", -1, 1),
                new Among("ion", -1, 2),
                new Among("er", -1, 1),
                new Among("ous", -1, 1),
                new Among("ant", -1, 1),
                new Among("ent", -1, 1),
                new Among("ment", 15, 1),
                new Among("ement", 16, 1)
            };

            a_8 = new[] 
            {
                new Among("e", -1, 1),
                new Among("l", -1, 2)
            };

            a_9 = new[] 
            {
                new Among("succeed", -1, -1),
                new Among("proceed", -1, -1),
                new Among("exceed", -1, -1),
                new Among("canning", -1, -1),
                new Among("inning", -1, -1),
                new Among("earring", -1, -1),
                new Among("herring", -1, -1),
                new Among("outing", -1, -1)
            };

            a_10 = new[] 
            {
                new Among("andes", -1, -1),
                new Among("atlas", -1, -1),
                new Among("bias", -1, -1),
                new Among("cosmos", -1, -1),
                new Among("dying", -1, 3),
                new Among("early", -1, 9),
                new Among("gently", -1, 7),
                new Among("howe", -1, -1),
                new Among("idly", -1, 6),
                new Among("lying", -1, 4),
                new Among("news", -1, -1),
                new Among("only", -1, 10),
                new Among("singly", -1, 11),
                new Among("skies", -1, 2),
                new Among("skis", -1, 1),
                new Among("sky", -1, -1),
                new Among("tying", -1, 5),
                new Among("ugly", -1, 8)
            };

        }



        private int r_prelude()
        {
            // (, line 25
            // unset Y_found, line 26
            B_Y_found = false;
            // do, line 27
            {
                int c1 = cursor;
                // (, line 27
                // [, line 27
                bra = cursor;
                // literal, line 27
                if (!(eq_s("'")))
                {
                    goto lab0;
                }
                // ], line 27
                ket = cursor;
                // delete, line 27
                slice_del();
            lab0: ; 
                cursor = c1;
            }
            // do, line 28
            {
                int c2 = cursor;
                // (, line 28
                // [, line 28
                bra = cursor;
                // literal, line 28
                if (!(eq_s("y")))
                {
                    goto lab1;
                }
                // ], line 28
                ket = cursor;
                // <-, line 28
                slice_from("Y");
                // set Y_found, line 28
                B_Y_found = true;
            lab1: ; 
                cursor = c2;
            }
            // do, line 29
            {
                int c3 = cursor;
                // repeat, line 29
                while (true)
                {
                    int c4 = cursor;
                    // (, line 29
                    while (true)
                    {
                        // goto, line 29
                        int c5 = cursor;
                        // (, line 29
                        if (in_grouping(g_v, 97, 121, false) != 0)
                        {
                            goto lab4;
                        }
                        // [, line 29
                        bra = cursor;
                        // literal, line 29
                        if (!(eq_s("y")))
                        {
                            goto lab4;
                        }
                        // ], line 29
                        ket = cursor;
                        cursor = c5;
                        break;
                    lab4: ; 
                        cursor = c5;
                        // goto, line 29
                        if (cursor >= limit)
                        {
                            goto lab3;
                        }
                        cursor++;
                    }
                    // <-, line 29
                    slice_from("Y");
                    // set Y_found, line 29
                    B_Y_found = true;
                    continue;
                lab3: ; 
                    cursor = c4;
                    break;
                }
                cursor = c3;
            }

            return 1;
        }

        private int r_mark_regions()
        {
            // (, line 32
            I_p1 = limit;
            I_p2 = limit;
            // do, line 35
            {
                int c1 = cursor;
                // (, line 35
                // or, line 41
                {
                    int c2 = cursor;
                    // among, line 36
                    if (find_among(a_0) == 0)
                    {
                        goto lab2;
                    }
                    goto lab1;
                lab2: ; 
                    cursor = c2;
                    // (, line 41
                    {
                        /* gopast */ 
                        int ret = out_grouping(g_v, 97, 121, true);
                        if (ret < 0)
                        {
                            goto lab0;
                        }

                        cursor += ret;
                    }
                    {
                        /* gopast */ 
                        int ret = in_grouping(g_v, 97, 121, true);
                        if (ret < 0)
                        {
                            goto lab0;
                        }

                        cursor += ret;
                    }
                }
            lab1: ; 
                // setmark p1, line 42
                I_p1 = cursor;
                {
                    /* gopast */ 
                    int ret = out_grouping(g_v, 97, 121, true);
                    if (ret < 0)
                    {
                        goto lab0;
                    }

                    cursor += ret;
                }
                {
                    /* gopast */ 
                    int ret = in_grouping(g_v, 97, 121, true);
                    if (ret < 0)
                    {
                        goto lab0;
                    }

                    cursor += ret;
                }
                // setmark p2, line 43
                I_p2 = cursor;
            lab0: ; 
                cursor = c1;
            }

            return 1;
        }

        private int r_shortv()
        {
            // (, line 49
            // or, line 51
            {
                int c1 = limit - cursor;
                // (, line 50
                if (out_grouping_b(g_v_WXY, 89, 121, false) != 0)
                {
                    goto lab1;
                }
                if (in_grouping_b(g_v, 97, 121, false) != 0)
                {
                    goto lab1;
                }
                if (out_grouping_b(g_v, 97, 121, false) != 0)
                {
                    goto lab1;
                }
                goto lab0;
            lab1: ; 
                cursor = limit - c1;
                // (, line 52
                if (out_grouping_b(g_v, 97, 121, false) != 0)
                {
                    return 0;
                }
                if (in_grouping_b(g_v, 97, 121, false) != 0)
                {
                    return 0;
                }
                // atlimit, line 52
                if (cursor > limit_backward)
                {
                    return 0;
                }
            }
        lab0: ; 

            return 1;
        }

        private int r_R1()
        {
            if (!(I_p1 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_R2()
        {
            if (!(I_p2 <= cursor))
            {
                return 0;
            }

            return 1;
        }

        private int r_Step_1a()
        {
            int among_var;
            // (, line 58
            // try, line 59
            {
                int c1 = limit - cursor;
                // (, line 59
                // [, line 60
                ket = cursor;
                // substring, line 60
                among_var = find_among_b(a_1);
                if (among_var == 0)
                {
                    {
                        cursor = limit - c1;
                        goto lab0;
                    }
                }
                // ], line 60
                bra = cursor;
                switch (among_var) 
                {
                    case 0:
                        {
                            {
                                cursor = limit - c1;
                                goto lab0;
                            }
                        }
                    case 1:
                        // (, line 62
                        // delete, line 62
                        slice_del();
                        break;
                }
            lab0: ; 
            }
            // [, line 65
            ket = cursor;
            // substring, line 65
            among_var = find_among_b(a_2);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 65
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 66
                    // <-, line 66
                    slice_from("ss");
                    break;
                case 2:
                    // (, line 68
                    // or, line 68
                    {
                        int c2 = limit - cursor;
                        // (, line 68
                        // hop, line 68
                        {
                            int ret = cursor - 2;
                            if (limit_backward > ret || ret > limit)
                            {
                                goto lab2;
                            }
                            cursor = ret;
                        }
                        // <-, line 68
                        slice_from("i");
                        goto lab1;
                    lab2: ; 
                        cursor = limit - c2;
                        // <-, line 68
                        slice_from("ie");
                    }
                lab1: ; 
                    break;
                case 3:
                    // (, line 69
                    // next, line 69
                    if (cursor <= limit_backward)
                    {
                        return 0;
                    }
                    cursor--;
                    {
                        /* gopast */ 
                        int ret = out_grouping_b(g_v, 97, 121, true);
                        if (ret < 0)
                        {
                            return 0;
                        }

                        cursor -= ret;
                    }
                    // delete, line 69
                    slice_del();
                    break;
            }

            return 1;
        }

        private int r_Step_1b()
        {
            int among_var;
            // (, line 74
            // [, line 75
            ket = cursor;
            // substring, line 75
            among_var = find_among_b(a_4);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 75
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 77
                    {
                        // call R1, line 77
                        int ret = r_R1();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // <-, line 77
                    slice_from("ee");
                    break;
                case 2:
                    // (, line 79
                    // test, line 80
                    {
                        int c1 = limit - cursor;
                        {
                            /* gopast */ 
                            int ret = out_grouping_b(g_v, 97, 121, true);
                            if (ret < 0)
                            {
                                return 0;
                            }

                            cursor -= ret;
                        }
                        cursor = limit - c1;
                    }
                    // delete, line 80
                    slice_del();
                    // test, line 81
                    {
                        int c3 = limit - cursor;
                        // substring, line 81
                        among_var = find_among_b(a_3);
                        if (among_var == 0)
                        {
                            return 0;
                        }
                        cursor = limit - c3;
                    }
                    switch (among_var) 
                    {
                        case 0:
                            {
                                return 0;
                            }
                        case 1:
                            // (, line 83
                            // <+, line 83
                            {
                                int c = cursor;
                                insert(cursor, cursor, "e");
                                cursor = c;
                            }
                            break;
                        case 2:
                            // (, line 86
                            // [, line 86
                            ket = cursor;
                            // next, line 86
                            if (cursor <= limit_backward)
                            {
                                return 0;
                            }
                            cursor--;
                            // ], line 86
                            bra = cursor;
                            // delete, line 86
                            slice_del();
                            break;
                        case 3:
                            // (, line 87
                            // atmark, line 87
                            if (cursor != I_p1)
                            {
                                return 0;
                            }
                            // test, line 87
                            {
                                int c4 = limit - cursor;
                                {
                                    // call shortv, line 87
                                    int ret = r_shortv();
                                    if (ret == 0)
                                        return 0;
                                    else if (ret < 0)
                                        return ret;
                                }
                                cursor = limit - c4;
                            }
                            // <+, line 87
                            {
                                int c = cursor;
                                insert(cursor, cursor, "e");
                                cursor = c;
                            }
                            break;
                    }
                    break;
            }

            return 1;
        }

        private int r_Step_1c()
        {
            // (, line 93
            // [, line 94
            ket = cursor;
            // or, line 94
            {
                int c1 = limit - cursor;
                // literal, line 94
                if (!(eq_s_b("y")))
                {
                    goto lab1;
                }
                goto lab0;
            lab1: ; 
                cursor = limit - c1;
                // literal, line 94
                if (!(eq_s_b("Y")))
                {
                    return 0;
                }
            }
        lab0: ; 
            // ], line 94
            bra = cursor;
            if (out_grouping_b(g_v, 97, 121, false) != 0)
            {
                return 0;
            }
            // not, line 95
            {
                int c2 = limit - cursor;
                // atlimit, line 95
                if (cursor > limit_backward)
                {
                    goto lab2;
                }
                return 0;
            lab2: ; 
                cursor = limit - c2;
            }
            // <-, line 96
            slice_from("i");

            return 1;
        }

        private int r_Step_2()
        {
            int among_var;
            // (, line 99
            // [, line 100
            ket = cursor;
            // substring, line 100
            among_var = find_among_b(a_5);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 100
            bra = cursor;
            {
                // call R1, line 100
                int ret = r_R1();
                if (ret == 0)
                    return 0;
                else if (ret < 0)
                    return ret;
            }
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 101
                    // <-, line 101
                    slice_from("tion");
                    break;
                case 2:
                    // (, line 102
                    // <-, line 102
                    slice_from("ence");
                    break;
                case 3:
                    // (, line 103
                    // <-, line 103
                    slice_from("ance");
                    break;
                case 4:
                    // (, line 104
                    // <-, line 104
                    slice_from("able");
                    break;
                case 5:
                    // (, line 105
                    // <-, line 105
                    slice_from("ent");
                    break;
                case 6:
                    // (, line 107
                    // <-, line 107
                    slice_from("ize");
                    break;
                case 7:
                    // (, line 109
                    // <-, line 109
                    slice_from("ate");
                    break;
                case 8:
                    // (, line 111
                    // <-, line 111
                    slice_from("al");
                    break;
                case 9:
                    // (, line 112
                    // <-, line 112
                    slice_from("ful");
                    break;
                case 10:
                    // (, line 114
                    // <-, line 114
                    slice_from("ous");
                    break;
                case 11:
                    // (, line 116
                    // <-, line 116
                    slice_from("ive");
                    break;
                case 12:
                    // (, line 118
                    // <-, line 118
                    slice_from("ble");
                    break;
                case 13:
                    // (, line 119
                    // literal, line 119
                    if (!(eq_s_b("l")))
                    {
                        return 0;
                    }
                    // <-, line 119
                    slice_from("og");
                    break;
                case 14:
                    // (, line 120
                    // <-, line 120
                    slice_from("ful");
                    break;
                case 15:
                    // (, line 121
                    // <-, line 121
                    slice_from("less");
                    break;
                case 16:
                    // (, line 122
                    if (in_grouping_b(g_valid_LI, 99, 116, false) != 0)
                    {
                        return 0;
                    }
                    // delete, line 122
                    slice_del();
                    break;
            }

            return 1;
        }

        private int r_Step_3()
        {
            int among_var;
            // (, line 126
            // [, line 127
            ket = cursor;
            // substring, line 127
            among_var = find_among_b(a_6);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 127
            bra = cursor;
            {
                // call R1, line 127
                int ret = r_R1();
                if (ret == 0)
                    return 0;
                else if (ret < 0)
                    return ret;
            }
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 128
                    // <-, line 128
                    slice_from("tion");
                    break;
                case 2:
                    // (, line 129
                    // <-, line 129
                    slice_from("ate");
                    break;
                case 3:
                    // (, line 130
                    // <-, line 130
                    slice_from("al");
                    break;
                case 4:
                    // (, line 132
                    // <-, line 132
                    slice_from("ic");
                    break;
                case 5:
                    // (, line 134
                    // delete, line 134
                    slice_del();
                    break;
                case 6:
                    // (, line 136
                    {
                        // call R2, line 136
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // delete, line 136
                    slice_del();
                    break;
            }

            return 1;
        }

        private int r_Step_4()
        {
            int among_var;
            // (, line 140
            // [, line 141
            ket = cursor;
            // substring, line 141
            among_var = find_among_b(a_7);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 141
            bra = cursor;
            {
                // call R2, line 141
                int ret = r_R2();
                if (ret == 0)
                    return 0;
                else if (ret < 0)
                    return ret;
            }
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 144
                    // delete, line 144
                    slice_del();
                    break;
                case 2:
                    // (, line 145
                    // or, line 145
                    {
                        int c1 = limit - cursor;
                        // literal, line 145
                        if (!(eq_s_b("s")))
                        {
                            goto lab1;
                        }
                        goto lab0;
                    lab1: ; 
                        cursor = limit - c1;
                        // literal, line 145
                        if (!(eq_s_b("t")))
                        {
                            return 0;
                        }
                    }
                lab0: ; 
                    // delete, line 145
                    slice_del();
                    break;
            }

            return 1;
        }

        private int r_Step_5()
        {
            int among_var;
            // (, line 149
            // [, line 150
            ket = cursor;
            // substring, line 150
            among_var = find_among_b(a_8);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 150
            bra = cursor;
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 151
                    // or, line 151
                    {
                        int c1 = limit - cursor;
                        {
                            // call R2, line 151
                            int ret = r_R2();
                            if (ret == 0)
                                goto lab1;
                            else if (ret < 0)
                                return ret;
                        }
                        goto lab0;
                    lab1: ; 
                        cursor = limit - c1;
                        // (, line 151
                        {
                            // call R1, line 151
                            int ret = r_R1();
                            if (ret == 0)
                                return 0;
                            else if (ret < 0)
                                return ret;
                        }
                        // not, line 151
                        {
                            int c2 = limit - cursor;
                            {
                                // call shortv, line 151
                                int ret = r_shortv();
                                if (ret == 0)
                                    goto lab2;
                                else if (ret < 0)
                                    return ret;
                            }
                            return 0;
                        lab2: ; 
                            cursor = limit - c2;
                        }
                    }
                lab0: ; 
                    // delete, line 151
                    slice_del();
                    break;
                case 2:
                    // (, line 152
                    {
                        // call R2, line 152
                        int ret = r_R2();
                        if (ret == 0)
                            return 0;
                        else if (ret < 0)
                            return ret;
                    }
                    // literal, line 152
                    if (!(eq_s_b("l")))
                    {
                        return 0;
                    }
                    // delete, line 152
                    slice_del();
                    break;
            }

            return 1;
        }

        private int r_exception2()
        {
            // (, line 156
            // [, line 158
            ket = cursor;
            // substring, line 158
            if (find_among_b(a_9) == 0)
            {
                return 0;
            }
            // ], line 158
            bra = cursor;
            // atlimit, line 158
            if (cursor > limit_backward)
            {
                return 0;
            }

            return 1;
        }

        private int r_exception1()
        {
            int among_var;
            // (, line 168
            // [, line 170
            bra = cursor;
            // substring, line 170
            among_var = find_among(a_10);
            if (among_var == 0)
            {
                return 0;
            }
            // ], line 170
            ket = cursor;
            // atlimit, line 170
            if (cursor < limit)
            {
                return 0;
            }
            switch (among_var) 
            {
                case 0:
                    {
                        return 0;
                    }
                case 1:
                    // (, line 174
                    // <-, line 174
                    slice_from("ski");
                    break;
                case 2:
                    // (, line 175
                    // <-, line 175
                    slice_from("sky");
                    break;
                case 3:
                    // (, line 176
                    // <-, line 176
                    slice_from("die");
                    break;
                case 4:
                    // (, line 177
                    // <-, line 177
                    slice_from("lie");
                    break;
                case 5:
                    // (, line 178
                    // <-, line 178
                    slice_from("tie");
                    break;
                case 6:
                    // (, line 182
                    // <-, line 182
                    slice_from("idl");
                    break;
                case 7:
                    // (, line 183
                    // <-, line 183
                    slice_from("gentl");
                    break;
                case 8:
                    // (, line 184
                    // <-, line 184
                    slice_from("ugli");
                    break;
                case 9:
                    // (, line 185
                    // <-, line 185
                    slice_from("earli");
                    break;
                case 10:
                    // (, line 186
                    // <-, line 186
                    slice_from("onli");
                    break;
                case 11:
                    // (, line 187
                    // <-, line 187
                    slice_from("singl");
                    break;
            }

            return 1;
        }

        private int r_postlude()
        {
            // (, line 203
            // Boolean test Y_found, line 203
            if (!(B_Y_found))
            {
                return 0;
            }
            // repeat, line 203
            while (true)
            {
                int c1 = cursor;
                // (, line 203
                while (true)
                {
                    // goto, line 203
                    int c2 = cursor;
                    // (, line 203
                    // [, line 203
                    bra = cursor;
                    // literal, line 203
                    if (!(eq_s("Y")))
                    {
                        goto lab1;
                    }
                    // ], line 203
                    ket = cursor;
                    cursor = c2;
                    break;
                lab1: ; 
                    cursor = c2;
                    // goto, line 203
                    if (cursor >= limit)
                    {
                        goto lab0;
                    }
                    cursor++;
                }
                // <-, line 203
                slice_from("y");
                continue;
            lab0: ; 
                cursor = c1;
                break;
            }

            return 1;
        }

        private int stem()
        {
            // (, line 205
            // or, line 207
            {
                int c1 = cursor;
                {
                    // call exception1, line 207
                    int ret = r_exception1();
                    if (ret == 0)
                        goto lab1;
                    else if (ret < 0)
                        return ret;
                }
                goto lab0;
            lab1: ; 
                cursor = c1;
                // not, line 208
                {
                    int c2 = cursor;
                    // hop, line 208
                    {
                        int ret = cursor + 3;
                        if (0 > ret || ret > limit)
                        {
                            goto lab3;
                        }
                        cursor = ret;
                    }
                    goto lab2;
                lab3: ; 
                    cursor = c2;
                }
                goto lab0;
            lab2: ; 
                cursor = c1;
                // (, line 208
                // do, line 209
                {
                    int c3 = cursor;
                    {
                        // call prelude, line 209
                        int ret = r_prelude();
                        if (ret == 0)
                            goto lab4;
                        else if (ret < 0)
                            return ret;
                    }
                lab4: ; 
                    cursor = c3;
                }
                // do, line 210
                {
                    int c4 = cursor;
                    {
                        // call mark_regions, line 210
                        int ret = r_mark_regions();
                        if (ret == 0)
                            goto lab5;
                        else if (ret < 0)
                            return ret;
                    }
                lab5: ; 
                    cursor = c4;
                }
                // backwards, line 211
                limit_backward = cursor; cursor = limit;
                // (, line 211
                // do, line 213
                {
                    int c5 = limit - cursor;
                    {
                        // call Step_1a, line 213
                        int ret = r_Step_1a();
                        if (ret == 0)
                            goto lab6;
                        else if (ret < 0)
                            return ret;
                    }
                lab6: ; 
                    cursor = limit - c5;
                }
                // or, line 215
                {
                    int c6 = limit - cursor;
                    {
                        // call exception2, line 215
                        int ret = r_exception2();
                        if (ret == 0)
                            goto lab8;
                        else if (ret < 0)
                            return ret;
                    }
                    goto lab7;
                lab8: ; 
                    cursor = limit - c6;
                    // (, line 215
                    // do, line 217
                    {
                        int c7 = limit - cursor;
                        {
                            // call Step_1b, line 217
                            int ret = r_Step_1b();
                            if (ret == 0)
                                goto lab9;
                            else if (ret < 0)
                                return ret;
                        }
                    lab9: ; 
                        cursor = limit - c7;
                    }
                    // do, line 218
                    {
                        int c8 = limit - cursor;
                        {
                            // call Step_1c, line 218
                            int ret = r_Step_1c();
                            if (ret == 0)
                                goto lab10;
                            else if (ret < 0)
                                return ret;
                        }
                    lab10: ; 
                        cursor = limit - c8;
                    }
                    // do, line 220
                    {
                        int c9 = limit - cursor;
                        {
                            // call Step_2, line 220
                            int ret = r_Step_2();
                            if (ret == 0)
                                goto lab11;
                            else if (ret < 0)
                                return ret;
                        }
                    lab11: ; 
                        cursor = limit - c9;
                    }
                    // do, line 221
                    {
                        int c10 = limit - cursor;
                        {
                            // call Step_3, line 221
                            int ret = r_Step_3();
                            if (ret == 0)
                                goto lab12;
                            else if (ret < 0)
                                return ret;
                        }
                    lab12: ; 
                        cursor = limit - c10;
                    }
                    // do, line 222
                    {
                        int c11 = limit - cursor;
                        {
                            // call Step_4, line 222
                            int ret = r_Step_4();
                            if (ret == 0)
                                goto lab13;
                            else if (ret < 0)
                                return ret;
                        }
                    lab13: ; 
                        cursor = limit - c11;
                    }
                    // do, line 224
                    {
                        int c12 = limit - cursor;
                        {
                            // call Step_5, line 224
                            int ret = r_Step_5();
                            if (ret == 0)
                                goto lab14;
                            else if (ret < 0)
                                return ret;
                        }
                    lab14: ; 
                        cursor = limit - c12;
                    }
                }
            lab7: ; 
                cursor = limit_backward;
                // do, line 227
                {
                    int c13 = cursor;
                    {
                        // call postlude, line 227
                        int ret = r_postlude();
                        if (ret == 0)
                            goto lab15;
                        else if (ret < 0)
                            return ret;
                    }
                lab15: ; 
                    cursor = c13;
                }
            }
        lab0: ; 

            return 1;
        }

        /// <summary>
        ///   Stems the buffer's contents.
        /// </summary>
        /// 
        protected override bool Process()
        {
            return this.stem() > 0;
        }

    }
}

